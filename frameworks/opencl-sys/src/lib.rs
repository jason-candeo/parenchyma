/* automatically generated by rust-bindgen */

pub const MAC_OS_X_VERSION_10_0: ::std::os::raw::c_uint = 1000;
pub const MAC_OS_X_VERSION_10_1: ::std::os::raw::c_uint = 1010;
pub const MAC_OS_X_VERSION_10_2: ::std::os::raw::c_uint = 1020;
pub const MAC_OS_X_VERSION_10_3: ::std::os::raw::c_uint = 1030;
pub const MAC_OS_X_VERSION_10_4: ::std::os::raw::c_uint = 1040;
pub const MAC_OS_X_VERSION_10_5: ::std::os::raw::c_uint = 1050;
pub const MAC_OS_X_VERSION_10_6: ::std::os::raw::c_uint = 1060;
pub const MAC_OS_X_VERSION_10_7: ::std::os::raw::c_uint = 1070;
pub const MAC_OS_X_VERSION_10_8: ::std::os::raw::c_uint = 1080;
pub const MAC_OS_X_VERSION_10_9: ::std::os::raw::c_uint = 1090;
pub const MAC_OS_X_VERSION_10_10: ::std::os::raw::c_uint = 101000;
pub const MAC_OS_X_VERSION_10_10_2: ::std::os::raw::c_uint = 101002;
pub const MAC_OS_X_VERSION_10_10_3: ::std::os::raw::c_uint = 101003;
pub const MAC_OS_X_VERSION_10_11: ::std::os::raw::c_uint = 101100;
pub const MAC_OS_X_VERSION_10_11_2: ::std::os::raw::c_uint = 101102;
pub const MAC_OS_X_VERSION_10_11_3: ::std::os::raw::c_uint = 101103;
pub const MAC_OS_X_VERSION_10_11_4: ::std::os::raw::c_uint = 101104;
pub const MAC_OS_X_VERSION_10_12: ::std::os::raw::c_uint = 101200;
pub const MAC_OS_X_VERSION_10_12_1: ::std::os::raw::c_uint = 101201;
pub const MAC_OS_X_VERSION_10_12_2: ::std::os::raw::c_uint = 101202;
pub const MAC_OS_X_VERSION_MAX_ALLOWED: ::std::os::raw::c_uint = 101202;
pub const __MAC_10_0: ::std::os::raw::c_uint = 1000;
pub const __MAC_10_1: ::std::os::raw::c_uint = 1010;
pub const __MAC_10_2: ::std::os::raw::c_uint = 1020;
pub const __MAC_10_3: ::std::os::raw::c_uint = 1030;
pub const __MAC_10_4: ::std::os::raw::c_uint = 1040;
pub const __MAC_10_5: ::std::os::raw::c_uint = 1050;
pub const __MAC_10_6: ::std::os::raw::c_uint = 1060;
pub const __MAC_10_7: ::std::os::raw::c_uint = 1070;
pub const __MAC_10_8: ::std::os::raw::c_uint = 1080;
pub const __MAC_10_9: ::std::os::raw::c_uint = 1090;
pub const __MAC_10_10: ::std::os::raw::c_uint = 101000;
pub const __MAC_10_10_2: ::std::os::raw::c_uint = 101002;
pub const __MAC_10_10_3: ::std::os::raw::c_uint = 101003;
pub const __MAC_10_11: ::std::os::raw::c_uint = 101100;
pub const __MAC_10_11_2: ::std::os::raw::c_uint = 101102;
pub const __MAC_10_11_3: ::std::os::raw::c_uint = 101103;
pub const __MAC_10_11_4: ::std::os::raw::c_uint = 101104;
pub const __MAC_10_12: ::std::os::raw::c_uint = 101200;
pub const __MAC_10_12_1: ::std::os::raw::c_uint = 101201;
pub const __MAC_10_12_2: ::std::os::raw::c_uint = 101202;
pub const __IPHONE_2_0: ::std::os::raw::c_uint = 20000;
pub const __IPHONE_2_1: ::std::os::raw::c_uint = 20100;
pub const __IPHONE_2_2: ::std::os::raw::c_uint = 20200;
pub const __IPHONE_3_0: ::std::os::raw::c_uint = 30000;
pub const __IPHONE_3_1: ::std::os::raw::c_uint = 30100;
pub const __IPHONE_3_2: ::std::os::raw::c_uint = 30200;
pub const __IPHONE_4_0: ::std::os::raw::c_uint = 40000;
pub const __IPHONE_4_1: ::std::os::raw::c_uint = 40100;
pub const __IPHONE_4_2: ::std::os::raw::c_uint = 40200;
pub const __IPHONE_4_3: ::std::os::raw::c_uint = 40300;
pub const __IPHONE_5_0: ::std::os::raw::c_uint = 50000;
pub const __IPHONE_5_1: ::std::os::raw::c_uint = 50100;
pub const __IPHONE_6_0: ::std::os::raw::c_uint = 60000;
pub const __IPHONE_6_1: ::std::os::raw::c_uint = 60100;
pub const __IPHONE_7_0: ::std::os::raw::c_uint = 70000;
pub const __IPHONE_7_1: ::std::os::raw::c_uint = 70100;
pub const __IPHONE_8_0: ::std::os::raw::c_uint = 80000;
pub const __IPHONE_8_1: ::std::os::raw::c_uint = 80100;
pub const __IPHONE_8_2: ::std::os::raw::c_uint = 80200;
pub const __IPHONE_8_3: ::std::os::raw::c_uint = 80300;
pub const __IPHONE_8_4: ::std::os::raw::c_uint = 80400;
pub const __IPHONE_9_0: ::std::os::raw::c_uint = 90000;
pub const __IPHONE_9_1: ::std::os::raw::c_uint = 90100;
pub const __IPHONE_9_2: ::std::os::raw::c_uint = 90200;
pub const __IPHONE_9_3: ::std::os::raw::c_uint = 90300;
pub const __IPHONE_10_0: ::std::os::raw::c_uint = 100000;
pub const __IPHONE_10_1: ::std::os::raw::c_uint = 100100;
pub const __IPHONE_10_2: ::std::os::raw::c_uint = 100200;
pub const __TVOS_9_0: ::std::os::raw::c_uint = 90000;
pub const __TVOS_9_1: ::std::os::raw::c_uint = 90100;
pub const __TVOS_9_2: ::std::os::raw::c_uint = 90200;
pub const __TVOS_10_0: ::std::os::raw::c_uint = 100000;
pub const __TVOS_10_0_1: ::std::os::raw::c_uint = 100001;
pub const __TVOS_10_1: ::std::os::raw::c_uint = 100100;
pub const __WATCHOS_1_0: ::std::os::raw::c_uint = 10000;
pub const __WATCHOS_2_0: ::std::os::raw::c_uint = 20000;
pub const __WATCHOS_3_0: ::std::os::raw::c_uint = 30000;
pub const __WATCHOS_3_1: ::std::os::raw::c_uint = 30100;
pub const __WATCHOS_3_1_1: ::std::os::raw::c_uint = 30101;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: ::std::os::raw::c_uint = 101202;
pub const __AVAILABILITY_MACROS_USES_AVAILABILITY: ::std::os::raw::c_uint = 1;
pub const __WORDSIZE: ::std::os::raw::c_uint = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: ::std::os::raw::c_uint = 0;
pub const __DARWIN_ONLY_VERS_1050: ::std::os::raw::c_uint = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: ::std::os::raw::c_uint = 1;
pub const __DARWIN_UNIX03: ::std::os::raw::c_uint = 1;
pub const __DARWIN_64_BIT_INO_T: ::std::os::raw::c_uint = 1;
pub const __DARWIN_VERS_1050: ::std::os::raw::c_uint = 1;
pub const __DARWIN_NON_CANCELABLE: ::std::os::raw::c_uint = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\x00";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\x00";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\x00";
pub const __DARWIN_C_ANSI: ::std::os::raw::c_uint = 4096;
pub const __DARWIN_C_FULL: ::std::os::raw::c_uint = 900000;
pub const __DARWIN_C_LEVEL: ::std::os::raw::c_uint = 900000;
pub const __STDC_WANT_LIB_EXT1__: ::std::os::raw::c_uint = 1;
pub const _DARWIN_FEATURE_64_BIT_INODE: ::std::os::raw::c_uint = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: ::std::os::raw::c_uint = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: ::std::os::raw::c_uint = 3;
pub const __PTHREAD_SIZE__: ::std::os::raw::c_uint = 8176;
pub const __PTHREAD_ATTR_SIZE__: ::std::os::raw::c_uint = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: ::std::os::raw::c_uint = 8;
pub const __PTHREAD_MUTEX_SIZE__: ::std::os::raw::c_uint = 56;
pub const __PTHREAD_CONDATTR_SIZE__: ::std::os::raw::c_uint = 8;
pub const __PTHREAD_COND_SIZE__: ::std::os::raw::c_uint = 40;
pub const __PTHREAD_ONCE_SIZE__: ::std::os::raw::c_uint = 8;
pub const __PTHREAD_RWLOCK_SIZE__: ::std::os::raw::c_uint = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: ::std::os::raw::c_uint = 16;
pub const INT8_MAX: ::std::os::raw::c_uint = 127;
pub const INT16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const INT64_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const INT8_MIN: ::std::os::raw::c_int = -128;
pub const INT16_MIN: ::std::os::raw::c_int = -32768;
pub const INT32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT64_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const UINT8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const UINT64_MAX: ::std::os::raw::c_int = -1;
pub const INT_LEAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_LEAST16_MIN: ::std::os::raw::c_int = -32768;
pub const INT_LEAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_LEAST64_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_LEAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_LEAST16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT_LEAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const INT_LEAST64_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_LEAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_LEAST16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT_LEAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const UINT_LEAST64_MAX: ::std::os::raw::c_int = -1;
pub const INT_FAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_FAST16_MIN: ::std::os::raw::c_int = -32768;
pub const INT_FAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_FAST64_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_FAST16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT_FAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const INT_FAST64_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_FAST16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT_FAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const UINT_FAST64_MAX: ::std::os::raw::c_int = -1;
pub const INTPTR_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTPTR_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTPTR_MAX: ::std::os::raw::c_int = -1;
pub const INTMAX_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTMAX_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTMAX_MAX: ::std::os::raw::c_int = -1;
pub const PTRDIFF_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const SIZE_MAX: ::std::os::raw::c_int = -1;
pub const RSIZE_MAX: ::std::os::raw::c_int = -1;
pub const WINT_MIN: ::std::os::raw::c_int = -2147483648;
pub const WINT_MAX: ::std::os::raw::c_uint = 2147483647;
pub const SIG_ATOMIC_MIN: ::std::os::raw::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: ::std::os::raw::c_uint = 2147483647;
pub const CL_CHAR_BIT: ::std::os::raw::c_uint = 8;
pub const CL_SCHAR_MAX: ::std::os::raw::c_uint = 127;
pub const CL_SCHAR_MIN: ::std::os::raw::c_int = -128;
pub const CL_CHAR_MAX: ::std::os::raw::c_uint = 127;
pub const CL_CHAR_MIN: ::std::os::raw::c_int = -128;
pub const CL_UCHAR_MAX: ::std::os::raw::c_uint = 255;
pub const CL_SHRT_MAX: ::std::os::raw::c_uint = 32767;
pub const CL_SHRT_MIN: ::std::os::raw::c_int = -32768;
pub const CL_USHRT_MAX: ::std::os::raw::c_uint = 65535;
pub const CL_INT_MAX: ::std::os::raw::c_uint = 2147483647;
pub const CL_INT_MIN: ::std::os::raw::c_int = -2147483648;
pub const CL_UINT_MAX: ::std::os::raw::c_uint = 4294967295;
pub const CL_FLT_DIG: ::std::os::raw::c_uint = 6;
pub const CL_FLT_MANT_DIG: ::std::os::raw::c_uint = 24;
pub const CL_FLT_MAX_10_EXP: ::std::os::raw::c_uint = 38;
pub const CL_FLT_MAX_EXP: ::std::os::raw::c_uint = 128;
pub const CL_FLT_MIN_10_EXP: ::std::os::raw::c_int = -37;
pub const CL_FLT_MIN_EXP: ::std::os::raw::c_int = -125;
pub const CL_FLT_RADIX: ::std::os::raw::c_uint = 2;
pub const CL_DBL_DIG: ::std::os::raw::c_uint = 15;
pub const CL_DBL_MANT_DIG: ::std::os::raw::c_uint = 53;
pub const CL_DBL_MAX_10_EXP: ::std::os::raw::c_uint = 308;
pub const CL_DBL_MAX_EXP: ::std::os::raw::c_uint = 1024;
pub const CL_DBL_MIN_10_EXP: ::std::os::raw::c_int = -307;
pub const CL_DBL_MIN_EXP: ::std::os::raw::c_int = -1021;
pub const CL_DBL_RADIX: ::std::os::raw::c_uint = 2;
pub const CL_M_E: f32 = 2.718281828459045;
pub const CL_M_LOG2E: f32 = 1.4426950408889634;
pub const CL_M_LOG10E: f32 = 0.4342944819032518;
pub const CL_M_LN2: f32 = 0.6931471805599453;
pub const CL_M_LN10: f32 = 2.302585092994046;
pub const CL_M_PI: f32 = 3.141592653589793;
pub const CL_M_PI_2: f32 = 1.5707963267948966;
pub const CL_M_PI_4: f32 = 0.7853981633974483;
pub const CL_M_1_PI: f32 = 0.3183098861837907;
pub const CL_M_2_PI: f32 = 0.6366197723675814;
pub const CL_M_2_SQRTPI: f32 = 1.1283791670955126;
pub const CL_M_SQRT2: f32 = 1.4142135623730951;
pub const CL_M_SQRT1_2: f32 = 0.7071067811865476;
pub const CL_M_E_F: f32 = 2.71828174591064;
pub const CL_M_LOG2E_F: f32 = 1.44269502162933;
pub const CL_M_LOG10E_F: f32 = 0.4342944920063;
pub const CL_M_LN2_F: f32 = 0.6931471824646;
pub const CL_M_LN10_F: f32 = 2.30258512496948;
pub const CL_M_PI_F: f32 = 3.14159274101257;
pub const CL_M_PI_2_F: f32 = 1.57079637050629;
pub const CL_M_PI_4_F: f32 = 0.78539818525314;
pub const CL_M_1_PI_F: f32 = 0.31830987334251;
pub const CL_M_2_PI_F: f32 = 0.63661974668503;
pub const CL_M_2_SQRTPI_F: f32 = 1.1283792257309;
pub const CL_M_SQRT2_F: f32 = 1.41421353816986;
pub const CL_M_SQRT1_2_F: f32 = 0.70710676908493;
pub const __DARWIN_WCHAR_MIN: ::std::os::raw::c_int = -2147483648;
pub const _FORTIFY_SOURCE: ::std::os::raw::c_uint = 2;
pub const __DARWIN_NSIG: ::std::os::raw::c_uint = 32;
pub const NSIG: ::std::os::raw::c_uint = 32;
pub const _I386_SIGNAL_H_: ::std::os::raw::c_uint = 1;
pub const SIGHUP: ::std::os::raw::c_uint = 1;
pub const SIGINT: ::std::os::raw::c_uint = 2;
pub const SIGQUIT: ::std::os::raw::c_uint = 3;
pub const SIGILL: ::std::os::raw::c_uint = 4;
pub const SIGTRAP: ::std::os::raw::c_uint = 5;
pub const SIGABRT: ::std::os::raw::c_uint = 6;
pub const SIGIOT: ::std::os::raw::c_uint = 6;
pub const SIGEMT: ::std::os::raw::c_uint = 7;
pub const SIGFPE: ::std::os::raw::c_uint = 8;
pub const SIGKILL: ::std::os::raw::c_uint = 9;
pub const SIGBUS: ::std::os::raw::c_uint = 10;
pub const SIGSEGV: ::std::os::raw::c_uint = 11;
pub const SIGSYS: ::std::os::raw::c_uint = 12;
pub const SIGPIPE: ::std::os::raw::c_uint = 13;
pub const SIGALRM: ::std::os::raw::c_uint = 14;
pub const SIGTERM: ::std::os::raw::c_uint = 15;
pub const SIGURG: ::std::os::raw::c_uint = 16;
pub const SIGSTOP: ::std::os::raw::c_uint = 17;
pub const SIGTSTP: ::std::os::raw::c_uint = 18;
pub const SIGCONT: ::std::os::raw::c_uint = 19;
pub const SIGCHLD: ::std::os::raw::c_uint = 20;
pub const SIGTTIN: ::std::os::raw::c_uint = 21;
pub const SIGTTOU: ::std::os::raw::c_uint = 22;
pub const SIGIO: ::std::os::raw::c_uint = 23;
pub const SIGXCPU: ::std::os::raw::c_uint = 24;
pub const SIGXFSZ: ::std::os::raw::c_uint = 25;
pub const SIGVTALRM: ::std::os::raw::c_uint = 26;
pub const SIGPROF: ::std::os::raw::c_uint = 27;
pub const SIGWINCH: ::std::os::raw::c_uint = 28;
pub const SIGINFO: ::std::os::raw::c_uint = 29;
pub const SIGUSR1: ::std::os::raw::c_uint = 30;
pub const SIGUSR2: ::std::os::raw::c_uint = 31;
pub const FP_PREC_24B: ::std::os::raw::c_uint = 0;
pub const FP_PREC_53B: ::std::os::raw::c_uint = 2;
pub const FP_PREC_64B: ::std::os::raw::c_uint = 3;
pub const FP_RND_NEAR: ::std::os::raw::c_uint = 0;
pub const FP_RND_DOWN: ::std::os::raw::c_uint = 1;
pub const FP_RND_UP: ::std::os::raw::c_uint = 2;
pub const FP_CHOP: ::std::os::raw::c_uint = 3;
pub const FP_STATE_BYTES: ::std::os::raw::c_uint = 512;
pub const SIGEV_NONE: ::std::os::raw::c_uint = 0;
pub const SIGEV_SIGNAL: ::std::os::raw::c_uint = 1;
pub const SIGEV_THREAD: ::std::os::raw::c_uint = 3;
pub const ILL_NOOP: ::std::os::raw::c_uint = 0;
pub const ILL_ILLOPC: ::std::os::raw::c_uint = 1;
pub const ILL_ILLTRP: ::std::os::raw::c_uint = 2;
pub const ILL_PRVOPC: ::std::os::raw::c_uint = 3;
pub const ILL_ILLOPN: ::std::os::raw::c_uint = 4;
pub const ILL_ILLADR: ::std::os::raw::c_uint = 5;
pub const ILL_PRVREG: ::std::os::raw::c_uint = 6;
pub const ILL_COPROC: ::std::os::raw::c_uint = 7;
pub const ILL_BADSTK: ::std::os::raw::c_uint = 8;
pub const FPE_NOOP: ::std::os::raw::c_uint = 0;
pub const FPE_FLTDIV: ::std::os::raw::c_uint = 1;
pub const FPE_FLTOVF: ::std::os::raw::c_uint = 2;
pub const FPE_FLTUND: ::std::os::raw::c_uint = 3;
pub const FPE_FLTRES: ::std::os::raw::c_uint = 4;
pub const FPE_FLTINV: ::std::os::raw::c_uint = 5;
pub const FPE_FLTSUB: ::std::os::raw::c_uint = 6;
pub const FPE_INTDIV: ::std::os::raw::c_uint = 7;
pub const FPE_INTOVF: ::std::os::raw::c_uint = 8;
pub const SEGV_NOOP: ::std::os::raw::c_uint = 0;
pub const SEGV_MAPERR: ::std::os::raw::c_uint = 1;
pub const SEGV_ACCERR: ::std::os::raw::c_uint = 2;
pub const BUS_NOOP: ::std::os::raw::c_uint = 0;
pub const BUS_ADRALN: ::std::os::raw::c_uint = 1;
pub const BUS_ADRERR: ::std::os::raw::c_uint = 2;
pub const BUS_OBJERR: ::std::os::raw::c_uint = 3;
pub const TRAP_BRKPT: ::std::os::raw::c_uint = 1;
pub const TRAP_TRACE: ::std::os::raw::c_uint = 2;
pub const CLD_NOOP: ::std::os::raw::c_uint = 0;
pub const CLD_EXITED: ::std::os::raw::c_uint = 1;
pub const CLD_KILLED: ::std::os::raw::c_uint = 2;
pub const CLD_DUMPED: ::std::os::raw::c_uint = 3;
pub const CLD_TRAPPED: ::std::os::raw::c_uint = 4;
pub const CLD_STOPPED: ::std::os::raw::c_uint = 5;
pub const CLD_CONTINUED: ::std::os::raw::c_uint = 6;
pub const POLL_IN: ::std::os::raw::c_uint = 1;
pub const POLL_OUT: ::std::os::raw::c_uint = 2;
pub const POLL_MSG: ::std::os::raw::c_uint = 3;
pub const POLL_ERR: ::std::os::raw::c_uint = 4;
pub const POLL_PRI: ::std::os::raw::c_uint = 5;
pub const POLL_HUP: ::std::os::raw::c_uint = 6;
pub const SA_ONSTACK: ::std::os::raw::c_uint = 1;
pub const SA_RESTART: ::std::os::raw::c_uint = 2;
pub const SA_RESETHAND: ::std::os::raw::c_uint = 4;
pub const SA_NOCLDSTOP: ::std::os::raw::c_uint = 8;
pub const SA_NODEFER: ::std::os::raw::c_uint = 16;
pub const SA_NOCLDWAIT: ::std::os::raw::c_uint = 32;
pub const SA_SIGINFO: ::std::os::raw::c_uint = 64;
pub const SA_USERTRAMP: ::std::os::raw::c_uint = 256;
pub const SA_64REGSET: ::std::os::raw::c_uint = 512;
pub const SA_USERSPACE_MASK: ::std::os::raw::c_uint = 127;
pub const SIG_BLOCK: ::std::os::raw::c_uint = 1;
pub const SIG_UNBLOCK: ::std::os::raw::c_uint = 2;
pub const SIG_SETMASK: ::std::os::raw::c_uint = 3;
pub const SI_USER: ::std::os::raw::c_uint = 65537;
pub const SI_QUEUE: ::std::os::raw::c_uint = 65538;
pub const SI_TIMER: ::std::os::raw::c_uint = 65539;
pub const SI_ASYNCIO: ::std::os::raw::c_uint = 65540;
pub const SI_MESGQ: ::std::os::raw::c_uint = 65541;
pub const SS_ONSTACK: ::std::os::raw::c_uint = 1;
pub const SS_DISABLE: ::std::os::raw::c_uint = 4;
pub const MINSIGSTKSZ: ::std::os::raw::c_uint = 32768;
pub const SIGSTKSZ: ::std::os::raw::c_uint = 131072;
pub const SV_ONSTACK: ::std::os::raw::c_uint = 1;
pub const SV_INTERRUPT: ::std::os::raw::c_uint = 2;
pub const SV_RESETHAND: ::std::os::raw::c_uint = 4;
pub const SV_NODEFER: ::std::os::raw::c_uint = 16;
pub const SV_NOCLDSTOP: ::std::os::raw::c_uint = 8;
pub const SV_SIGINFO: ::std::os::raw::c_uint = 64;
pub const PRIO_PROCESS: ::std::os::raw::c_uint = 0;
pub const PRIO_PGRP: ::std::os::raw::c_uint = 1;
pub const PRIO_USER: ::std::os::raw::c_uint = 2;
pub const PRIO_DARWIN_THREAD: ::std::os::raw::c_uint = 3;
pub const PRIO_DARWIN_PROCESS: ::std::os::raw::c_uint = 4;
pub const PRIO_MIN: ::std::os::raw::c_int = -20;
pub const PRIO_MAX: ::std::os::raw::c_uint = 20;
pub const PRIO_DARWIN_BG: ::std::os::raw::c_uint = 4096;
pub const PRIO_DARWIN_NONUI: ::std::os::raw::c_uint = 4097;
pub const RUSAGE_SELF: ::std::os::raw::c_uint = 0;
pub const RUSAGE_CHILDREN: ::std::os::raw::c_int = -1;
pub const RUSAGE_INFO_V0: ::std::os::raw::c_uint = 0;
pub const RUSAGE_INFO_V1: ::std::os::raw::c_uint = 1;
pub const RUSAGE_INFO_V2: ::std::os::raw::c_uint = 2;
pub const RUSAGE_INFO_V3: ::std::os::raw::c_uint = 3;
pub const RUSAGE_INFO_CURRENT: ::std::os::raw::c_uint = 3;
pub const RLIMIT_CPU: ::std::os::raw::c_uint = 0;
pub const RLIMIT_FSIZE: ::std::os::raw::c_uint = 1;
pub const RLIMIT_DATA: ::std::os::raw::c_uint = 2;
pub const RLIMIT_STACK: ::std::os::raw::c_uint = 3;
pub const RLIMIT_CORE: ::std::os::raw::c_uint = 4;
pub const RLIMIT_AS: ::std::os::raw::c_uint = 5;
pub const RLIMIT_RSS: ::std::os::raw::c_uint = 5;
pub const RLIMIT_MEMLOCK: ::std::os::raw::c_uint = 6;
pub const RLIMIT_NPROC: ::std::os::raw::c_uint = 7;
pub const RLIMIT_NOFILE: ::std::os::raw::c_uint = 8;
pub const RLIM_NLIMITS: ::std::os::raw::c_uint = 9;
pub const _RLIMIT_POSIX_FLAG: ::std::os::raw::c_uint = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: ::std::os::raw::c_uint = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: ::std::os::raw::c_uint = 2;
pub const RLIMIT_THREAD_CPULIMITS: ::std::os::raw::c_uint = 3;
pub const WAKEMON_ENABLE: ::std::os::raw::c_uint = 1;
pub const WAKEMON_DISABLE: ::std::os::raw::c_uint = 2;
pub const WAKEMON_GET_PARAMS: ::std::os::raw::c_uint = 4;
pub const WAKEMON_SET_DEFAULTS: ::std::os::raw::c_uint = 8;
pub const WAKEMON_MAKE_FATAL: ::std::os::raw::c_uint = 16;
pub const CPUMON_MAKE_FATAL: ::std::os::raw::c_uint = 4096;
pub const IOPOL_TYPE_DISK: ::std::os::raw::c_uint = 0;
pub const IOPOL_SCOPE_PROCESS: ::std::os::raw::c_uint = 0;
pub const IOPOL_SCOPE_THREAD: ::std::os::raw::c_uint = 1;
pub const IOPOL_SCOPE_DARWIN_BG: ::std::os::raw::c_uint = 2;
pub const IOPOL_DEFAULT: ::std::os::raw::c_uint = 0;
pub const IOPOL_IMPORTANT: ::std::os::raw::c_uint = 1;
pub const IOPOL_PASSIVE: ::std::os::raw::c_uint = 2;
pub const IOPOL_THROTTLE: ::std::os::raw::c_uint = 3;
pub const IOPOL_UTILITY: ::std::os::raw::c_uint = 4;
pub const IOPOL_STANDARD: ::std::os::raw::c_uint = 5;
pub const IOPOL_APPLICATION: ::std::os::raw::c_uint = 5;
pub const IOPOL_NORMAL: ::std::os::raw::c_uint = 1;
pub const WNOHANG: ::std::os::raw::c_uint = 1;
pub const WUNTRACED: ::std::os::raw::c_uint = 2;
pub const WCOREFLAG: ::std::os::raw::c_uint = 128;
pub const _WSTOPPED: ::std::os::raw::c_uint = 127;
pub const WEXITED: ::std::os::raw::c_uint = 4;
pub const WSTOPPED: ::std::os::raw::c_uint = 8;
pub const WCONTINUED: ::std::os::raw::c_uint = 16;
pub const WNOWAIT: ::std::os::raw::c_uint = 32;
pub const WAIT_ANY: ::std::os::raw::c_int = -1;
pub const WAIT_MYPGRP: ::std::os::raw::c_uint = 0;
pub const _QUAD_HIGHWORD: ::std::os::raw::c_uint = 1;
pub const _QUAD_LOWWORD: ::std::os::raw::c_uint = 0;
pub const __DARWIN_LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const __DARWIN_BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const __DARWIN_PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const __DARWIN_BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const EXIT_FAILURE: ::std::os::raw::c_uint = 1;
pub const EXIT_SUCCESS: ::std::os::raw::c_uint = 0;
pub const RAND_MAX: ::std::os::raw::c_uint = 2147483647;
pub const _MM_HINT_T0: ::std::os::raw::c_uint = 3;
pub const _MM_HINT_T1: ::std::os::raw::c_uint = 2;
pub const _MM_HINT_T2: ::std::os::raw::c_uint = 1;
pub const _MM_HINT_NTA: ::std::os::raw::c_uint = 0;
pub const _MM_EXCEPT_INVALID: ::std::os::raw::c_uint = 1;
pub const _MM_EXCEPT_DENORM: ::std::os::raw::c_uint = 2;
pub const _MM_EXCEPT_DIV_ZERO: ::std::os::raw::c_uint = 4;
pub const _MM_EXCEPT_OVERFLOW: ::std::os::raw::c_uint = 8;
pub const _MM_EXCEPT_UNDERFLOW: ::std::os::raw::c_uint = 16;
pub const _MM_EXCEPT_INEXACT: ::std::os::raw::c_uint = 32;
pub const _MM_EXCEPT_MASK: ::std::os::raw::c_uint = 63;
pub const _MM_MASK_INVALID: ::std::os::raw::c_uint = 128;
pub const _MM_MASK_DENORM: ::std::os::raw::c_uint = 256;
pub const _MM_MASK_DIV_ZERO: ::std::os::raw::c_uint = 512;
pub const _MM_MASK_OVERFLOW: ::std::os::raw::c_uint = 1024;
pub const _MM_MASK_UNDERFLOW: ::std::os::raw::c_uint = 2048;
pub const _MM_MASK_INEXACT: ::std::os::raw::c_uint = 4096;
pub const _MM_MASK_MASK: ::std::os::raw::c_uint = 8064;
pub const _MM_ROUND_NEAREST: ::std::os::raw::c_uint = 0;
pub const _MM_ROUND_DOWN: ::std::os::raw::c_uint = 8192;
pub const _MM_ROUND_UP: ::std::os::raw::c_uint = 16384;
pub const _MM_ROUND_TOWARD_ZERO: ::std::os::raw::c_uint = 24576;
pub const _MM_ROUND_MASK: ::std::os::raw::c_uint = 24576;
pub const _MM_FLUSH_ZERO_MASK: ::std::os::raw::c_uint = 32768;
pub const _MM_FLUSH_ZERO_ON: ::std::os::raw::c_uint = 32768;
pub const _MM_FLUSH_ZERO_OFF: ::std::os::raw::c_uint = 0;
pub const __CL_FLOAT4__: ::std::os::raw::c_uint = 1;
pub const __CL_UCHAR16__: ::std::os::raw::c_uint = 1;
pub const __CL_CHAR16__: ::std::os::raw::c_uint = 1;
pub const __CL_USHORT8__: ::std::os::raw::c_uint = 1;
pub const __CL_SHORT8__: ::std::os::raw::c_uint = 1;
pub const __CL_INT4__: ::std::os::raw::c_uint = 1;
pub const __CL_UINT4__: ::std::os::raw::c_uint = 1;
pub const __CL_ULONG2__: ::std::os::raw::c_uint = 1;
pub const __CL_LONG2__: ::std::os::raw::c_uint = 1;
pub const __CL_DOUBLE2__: ::std::os::raw::c_uint = 1;
pub const __CL_UCHAR8__: ::std::os::raw::c_uint = 1;
pub const __CL_CHAR8__: ::std::os::raw::c_uint = 1;
pub const __CL_USHORT4__: ::std::os::raw::c_uint = 1;
pub const __CL_SHORT4__: ::std::os::raw::c_uint = 1;
pub const __CL_INT2__: ::std::os::raw::c_uint = 1;
pub const __CL_UINT2__: ::std::os::raw::c_uint = 1;
pub const __CL_ULONG1__: ::std::os::raw::c_uint = 1;
pub const __CL_LONG1__: ::std::os::raw::c_uint = 1;
pub const CL_HAS_NAMED_VECTOR_FIELDS: ::std::os::raw::c_uint = 1;
pub const CL_HAS_HI_LO_VECTOR_FIELDS: ::std::os::raw::c_uint = 1;
pub const CL_SUCCESS: ::std::os::raw::c_uint = 0;
pub const CL_DEVICE_NOT_FOUND: ::std::os::raw::c_int = -1;
pub const CL_DEVICE_NOT_AVAILABLE: ::std::os::raw::c_int = -2;
pub const CL_COMPILER_NOT_AVAILABLE: ::std::os::raw::c_int = -3;
pub const CL_MEM_OBJECT_ALLOCATION_FAILURE: ::std::os::raw::c_int = -4;
pub const CL_OUT_OF_RESOURCES: ::std::os::raw::c_int = -5;
pub const CL_OUT_OF_HOST_MEMORY: ::std::os::raw::c_int = -6;
pub const CL_PROFILING_INFO_NOT_AVAILABLE: ::std::os::raw::c_int = -7;
pub const CL_MEM_COPY_OVERLAP: ::std::os::raw::c_int = -8;
pub const CL_IMAGE_FORMAT_MISMATCH: ::std::os::raw::c_int = -9;
pub const CL_IMAGE_FORMAT_NOT_SUPPORTED: ::std::os::raw::c_int = -10;
pub const CL_BUILD_PROGRAM_FAILURE: ::std::os::raw::c_int = -11;
pub const CL_MAP_FAILURE: ::std::os::raw::c_int = -12;
pub const CL_MISALIGNED_SUB_BUFFER_OFFSET: ::std::os::raw::c_int = -13;
pub const CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST: ::std::os::raw::c_int
          =
    -14;
pub const CL_COMPILE_PROGRAM_FAILURE: ::std::os::raw::c_int = -15;
pub const CL_LINKER_NOT_AVAILABLE: ::std::os::raw::c_int = -16;
pub const CL_LINK_PROGRAM_FAILURE: ::std::os::raw::c_int = -17;
pub const CL_DEVICE_PARTITION_FAILED: ::std::os::raw::c_int = -18;
pub const CL_KERNEL_ARG_INFO_NOT_AVAILABLE: ::std::os::raw::c_int = -19;
pub const CL_INVALID_VALUE: ::std::os::raw::c_int = -30;
pub const CL_INVALID_DEVICE_TYPE: ::std::os::raw::c_int = -31;
pub const CL_INVALID_PLATFORM: ::std::os::raw::c_int = -32;
pub const CL_INVALID_DEVICE: ::std::os::raw::c_int = -33;
pub const CL_INVALID_CONTEXT: ::std::os::raw::c_int = -34;
pub const CL_INVALID_QUEUE_PROPERTIES: ::std::os::raw::c_int = -35;
pub const CL_INVALID_COMMAND_QUEUE: ::std::os::raw::c_int = -36;
pub const CL_INVALID_HOST_PTR: ::std::os::raw::c_int = -37;
pub const CL_INVALID_MEM_OBJECT: ::std::os::raw::c_int = -38;
pub const CL_INVALID_IMAGE_FORMAT_DESCRIPTOR: ::std::os::raw::c_int = -39;
pub const CL_INVALID_IMAGE_SIZE: ::std::os::raw::c_int = -40;
pub const CL_INVALID_SAMPLER: ::std::os::raw::c_int = -41;
pub const CL_INVALID_BINARY: ::std::os::raw::c_int = -42;
pub const CL_INVALID_BUILD_OPTIONS: ::std::os::raw::c_int = -43;
pub const CL_INVALID_PROGRAM: ::std::os::raw::c_int = -44;
pub const CL_INVALID_PROGRAM_EXECUTABLE: ::std::os::raw::c_int = -45;
pub const CL_INVALID_KERNEL_NAME: ::std::os::raw::c_int = -46;
pub const CL_INVALID_KERNEL_DEFINITION: ::std::os::raw::c_int = -47;
pub const CL_INVALID_KERNEL: ::std::os::raw::c_int = -48;
pub const CL_INVALID_ARG_INDEX: ::std::os::raw::c_int = -49;
pub const CL_INVALID_ARG_VALUE: ::std::os::raw::c_int = -50;
pub const CL_INVALID_ARG_SIZE: ::std::os::raw::c_int = -51;
pub const CL_INVALID_KERNEL_ARGS: ::std::os::raw::c_int = -52;
pub const CL_INVALID_WORK_DIMENSION: ::std::os::raw::c_int = -53;
pub const CL_INVALID_WORK_GROUP_SIZE: ::std::os::raw::c_int = -54;
pub const CL_INVALID_WORK_ITEM_SIZE: ::std::os::raw::c_int = -55;
pub const CL_INVALID_GLOBAL_OFFSET: ::std::os::raw::c_int = -56;
pub const CL_INVALID_EVENT_WAIT_LIST: ::std::os::raw::c_int = -57;
pub const CL_INVALID_EVENT: ::std::os::raw::c_int = -58;
pub const CL_INVALID_OPERATION: ::std::os::raw::c_int = -59;
pub const CL_INVALID_GL_OBJECT: ::std::os::raw::c_int = -60;
pub const CL_INVALID_BUFFER_SIZE: ::std::os::raw::c_int = -61;
pub const CL_INVALID_MIP_LEVEL: ::std::os::raw::c_int = -62;
pub const CL_INVALID_GLOBAL_WORK_SIZE: ::std::os::raw::c_int = -63;
pub const CL_INVALID_PROPERTY: ::std::os::raw::c_int = -64;
pub const CL_INVALID_IMAGE_DESCRIPTOR: ::std::os::raw::c_int = -65;
pub const CL_INVALID_COMPILER_OPTIONS: ::std::os::raw::c_int = -66;
pub const CL_INVALID_LINKER_OPTIONS: ::std::os::raw::c_int = -67;
pub const CL_INVALID_DEVICE_PARTITION_COUNT: ::std::os::raw::c_int = -68;
pub const CL_VERSION_1_0: ::std::os::raw::c_uint = 1;
pub const CL_VERSION_1_1: ::std::os::raw::c_uint = 1;
pub const CL_VERSION_1_2: ::std::os::raw::c_uint = 1;
pub const CL_FALSE: ::std::os::raw::c_uint = 0;
pub const CL_TRUE: ::std::os::raw::c_uint = 1;
pub const CL_BLOCKING: ::std::os::raw::c_uint = 1;
pub const CL_NON_BLOCKING: ::std::os::raw::c_uint = 0;
pub const CL_PLATFORM_PROFILE: ::std::os::raw::c_uint = 2304;
pub const CL_PLATFORM_VERSION: ::std::os::raw::c_uint = 2305;
pub const CL_PLATFORM_NAME: ::std::os::raw::c_uint = 2306;
pub const CL_PLATFORM_VENDOR: ::std::os::raw::c_uint = 2307;
pub const CL_PLATFORM_EXTENSIONS: ::std::os::raw::c_uint = 2308;
pub const CL_DEVICE_TYPE_DEFAULT: ::std::os::raw::c_uint = 1;
pub const CL_DEVICE_TYPE_CPU: ::std::os::raw::c_uint = 2;
pub const CL_DEVICE_TYPE_GPU: ::std::os::raw::c_uint = 4;
pub const CL_DEVICE_TYPE_ACCELERATOR: ::std::os::raw::c_uint = 8;
pub const CL_DEVICE_TYPE_CUSTOM: ::std::os::raw::c_uint = 16;
pub const CL_DEVICE_TYPE_ALL: ::std::os::raw::c_uint = 4294967295;
pub const CL_DEVICE_TYPE: ::std::os::raw::c_uint = 4096;
pub const CL_DEVICE_VENDOR_ID: ::std::os::raw::c_uint = 4097;
pub const CL_DEVICE_MAX_COMPUTE_UNITS: ::std::os::raw::c_uint = 4098;
pub const CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS: ::std::os::raw::c_uint = 4099;
pub const CL_DEVICE_MAX_WORK_GROUP_SIZE: ::std::os::raw::c_uint = 4100;
pub const CL_DEVICE_MAX_WORK_ITEM_SIZES: ::std::os::raw::c_uint = 4101;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR: ::std::os::raw::c_uint =
    4102;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT: ::std::os::raw::c_uint =
    4103;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT: ::std::os::raw::c_uint = 4104;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG: ::std::os::raw::c_uint =
    4105;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT: ::std::os::raw::c_uint =
    4106;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE: ::std::os::raw::c_uint =
    4107;
pub const CL_DEVICE_MAX_CLOCK_FREQUENCY: ::std::os::raw::c_uint = 4108;
pub const CL_DEVICE_ADDRESS_BITS: ::std::os::raw::c_uint = 4109;
pub const CL_DEVICE_MAX_READ_IMAGE_ARGS: ::std::os::raw::c_uint = 4110;
pub const CL_DEVICE_MAX_WRITE_IMAGE_ARGS: ::std::os::raw::c_uint = 4111;
pub const CL_DEVICE_MAX_MEM_ALLOC_SIZE: ::std::os::raw::c_uint = 4112;
pub const CL_DEVICE_IMAGE2D_MAX_WIDTH: ::std::os::raw::c_uint = 4113;
pub const CL_DEVICE_IMAGE2D_MAX_HEIGHT: ::std::os::raw::c_uint = 4114;
pub const CL_DEVICE_IMAGE3D_MAX_WIDTH: ::std::os::raw::c_uint = 4115;
pub const CL_DEVICE_IMAGE3D_MAX_HEIGHT: ::std::os::raw::c_uint = 4116;
pub const CL_DEVICE_IMAGE3D_MAX_DEPTH: ::std::os::raw::c_uint = 4117;
pub const CL_DEVICE_IMAGE_SUPPORT: ::std::os::raw::c_uint = 4118;
pub const CL_DEVICE_MAX_PARAMETER_SIZE: ::std::os::raw::c_uint = 4119;
pub const CL_DEVICE_MAX_SAMPLERS: ::std::os::raw::c_uint = 4120;
pub const CL_DEVICE_MEM_BASE_ADDR_ALIGN: ::std::os::raw::c_uint = 4121;
pub const CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE: ::std::os::raw::c_uint = 4122;
pub const CL_DEVICE_SINGLE_FP_CONFIG: ::std::os::raw::c_uint = 4123;
pub const CL_DEVICE_GLOBAL_MEM_CACHE_TYPE: ::std::os::raw::c_uint = 4124;
pub const CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE: ::std::os::raw::c_uint = 4125;
pub const CL_DEVICE_GLOBAL_MEM_CACHE_SIZE: ::std::os::raw::c_uint = 4126;
pub const CL_DEVICE_GLOBAL_MEM_SIZE: ::std::os::raw::c_uint = 4127;
pub const CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE: ::std::os::raw::c_uint = 4128;
pub const CL_DEVICE_MAX_CONSTANT_ARGS: ::std::os::raw::c_uint = 4129;
pub const CL_DEVICE_LOCAL_MEM_TYPE: ::std::os::raw::c_uint = 4130;
pub const CL_DEVICE_LOCAL_MEM_SIZE: ::std::os::raw::c_uint = 4131;
pub const CL_DEVICE_ERROR_CORRECTION_SUPPORT: ::std::os::raw::c_uint = 4132;
pub const CL_DEVICE_PROFILING_TIMER_RESOLUTION: ::std::os::raw::c_uint = 4133;
pub const CL_DEVICE_ENDIAN_LITTLE: ::std::os::raw::c_uint = 4134;
pub const CL_DEVICE_AVAILABLE: ::std::os::raw::c_uint = 4135;
pub const CL_DEVICE_COMPILER_AVAILABLE: ::std::os::raw::c_uint = 4136;
pub const CL_DEVICE_EXECUTION_CAPABILITIES: ::std::os::raw::c_uint = 4137;
pub const CL_DEVICE_QUEUE_PROPERTIES: ::std::os::raw::c_uint = 4138;
pub const CL_DEVICE_NAME: ::std::os::raw::c_uint = 4139;
pub const CL_DEVICE_VENDOR: ::std::os::raw::c_uint = 4140;
pub const CL_DRIVER_VERSION: ::std::os::raw::c_uint = 4141;
pub const CL_DEVICE_PROFILE: ::std::os::raw::c_uint = 4142;
pub const CL_DEVICE_VERSION: ::std::os::raw::c_uint = 4143;
pub const CL_DEVICE_EXTENSIONS: ::std::os::raw::c_uint = 4144;
pub const CL_DEVICE_PLATFORM: ::std::os::raw::c_uint = 4145;
pub const CL_DEVICE_DOUBLE_FP_CONFIG: ::std::os::raw::c_uint = 4146;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF: ::std::os::raw::c_uint =
    4148;
pub const CL_DEVICE_HOST_UNIFIED_MEMORY: ::std::os::raw::c_uint = 4149;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR: ::std::os::raw::c_uint = 4150;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT: ::std::os::raw::c_uint = 4151;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_INT: ::std::os::raw::c_uint = 4152;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG: ::std::os::raw::c_uint = 4153;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT: ::std::os::raw::c_uint = 4154;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE: ::std::os::raw::c_uint = 4155;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF: ::std::os::raw::c_uint = 4156;
pub const CL_DEVICE_OPENCL_C_VERSION: ::std::os::raw::c_uint = 4157;
pub const CL_DEVICE_LINKER_AVAILABLE: ::std::os::raw::c_uint = 4158;
pub const CL_DEVICE_BUILT_IN_KERNELS: ::std::os::raw::c_uint = 4159;
pub const CL_DEVICE_IMAGE_MAX_BUFFER_SIZE: ::std::os::raw::c_uint = 4160;
pub const CL_DEVICE_IMAGE_MAX_ARRAY_SIZE: ::std::os::raw::c_uint = 4161;
pub const CL_DEVICE_PARENT_DEVICE: ::std::os::raw::c_uint = 4162;
pub const CL_DEVICE_PARTITION_MAX_SUB_DEVICES: ::std::os::raw::c_uint = 4163;
pub const CL_DEVICE_PARTITION_PROPERTIES: ::std::os::raw::c_uint = 4164;
pub const CL_DEVICE_PARTITION_AFFINITY_DOMAIN: ::std::os::raw::c_uint = 4165;
pub const CL_DEVICE_PARTITION_TYPE: ::std::os::raw::c_uint = 4166;
pub const CL_DEVICE_REFERENCE_COUNT: ::std::os::raw::c_uint = 4167;
pub const CL_DEVICE_PREFERRED_INTEROP_USER_SYNC: ::std::os::raw::c_uint =
    4168;
pub const CL_DEVICE_PRINTF_BUFFER_SIZE: ::std::os::raw::c_uint = 4169;
pub const CL_DEVICE_IMAGE_PITCH_ALIGNMENT: ::std::os::raw::c_uint = 4170;
pub const CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT: ::std::os::raw::c_uint =
    4171;
pub const CL_FP_DENORM: ::std::os::raw::c_uint = 1;
pub const CL_FP_INF_NAN: ::std::os::raw::c_uint = 2;
pub const CL_FP_ROUND_TO_NEAREST: ::std::os::raw::c_uint = 4;
pub const CL_FP_ROUND_TO_ZERO: ::std::os::raw::c_uint = 8;
pub const CL_FP_ROUND_TO_INF: ::std::os::raw::c_uint = 16;
pub const CL_FP_FMA: ::std::os::raw::c_uint = 32;
pub const CL_FP_SOFT_FLOAT: ::std::os::raw::c_uint = 64;
pub const CL_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT: ::std::os::raw::c_uint = 128;
pub const CL_NONE: ::std::os::raw::c_uint = 0;
pub const CL_READ_ONLY_CACHE: ::std::os::raw::c_uint = 1;
pub const CL_READ_WRITE_CACHE: ::std::os::raw::c_uint = 2;
pub const CL_LOCAL: ::std::os::raw::c_uint = 1;
pub const CL_GLOBAL: ::std::os::raw::c_uint = 2;
pub const CL_EXEC_KERNEL: ::std::os::raw::c_uint = 1;
pub const CL_EXEC_NATIVE_KERNEL: ::std::os::raw::c_uint = 2;
pub const CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE: ::std::os::raw::c_uint = 1;
pub const CL_QUEUE_PROFILING_ENABLE: ::std::os::raw::c_uint = 2;
pub const CL_CONTEXT_REFERENCE_COUNT: ::std::os::raw::c_uint = 4224;
pub const CL_CONTEXT_DEVICES: ::std::os::raw::c_uint = 4225;
pub const CL_CONTEXT_PROPERTIES: ::std::os::raw::c_uint = 4226;
pub const CL_CONTEXT_NUM_DEVICES: ::std::os::raw::c_uint = 4227;
pub const CL_CONTEXT_PLATFORM: ::std::os::raw::c_uint = 4228;
pub const CL_CONTEXT_INTEROP_USER_SYNC: ::std::os::raw::c_uint = 4229;
pub const CL_DEVICE_PARTITION_EQUALLY: ::std::os::raw::c_uint = 4230;
pub const CL_DEVICE_PARTITION_BY_COUNTS: ::std::os::raw::c_uint = 4231;
pub const CL_DEVICE_PARTITION_BY_COUNTS_LIST_END: ::std::os::raw::c_uint = 0;
pub const CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN: ::std::os::raw::c_uint =
    4232;
pub const CL_DEVICE_AFFINITY_DOMAIN_NUMA: ::std::os::raw::c_uint = 1;
pub const CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE: ::std::os::raw::c_uint = 2;
pub const CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE: ::std::os::raw::c_uint = 4;
pub const CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE: ::std::os::raw::c_uint = 8;
pub const CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE: ::std::os::raw::c_uint = 16;
pub const CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE: ::std::os::raw::c_uint
          =
    32;
pub const CL_QUEUE_CONTEXT: ::std::os::raw::c_uint = 4240;
pub const CL_QUEUE_DEVICE: ::std::os::raw::c_uint = 4241;
pub const CL_QUEUE_REFERENCE_COUNT: ::std::os::raw::c_uint = 4242;
pub const CL_QUEUE_PROPERTIES: ::std::os::raw::c_uint = 4243;
pub const CL_MEM_READ_WRITE: ::std::os::raw::c_uint = 1;
pub const CL_MEM_WRITE_ONLY: ::std::os::raw::c_uint = 2;
pub const CL_MEM_READ_ONLY: ::std::os::raw::c_uint = 4;
pub const CL_MEM_USE_HOST_PTR: ::std::os::raw::c_uint = 8;
pub const CL_MEM_ALLOC_HOST_PTR: ::std::os::raw::c_uint = 16;
pub const CL_MEM_COPY_HOST_PTR: ::std::os::raw::c_uint = 32;
pub const CL_MEM_HOST_WRITE_ONLY: ::std::os::raw::c_uint = 128;
pub const CL_MEM_HOST_READ_ONLY: ::std::os::raw::c_uint = 256;
pub const CL_MEM_HOST_NO_ACCESS: ::std::os::raw::c_uint = 512;
pub const CL_MIGRATE_MEM_OBJECT_HOST: ::std::os::raw::c_uint = 1;
pub const CL_MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED: ::std::os::raw::c_uint = 2;
pub const CL_R: ::std::os::raw::c_uint = 4272;
pub const CL_A: ::std::os::raw::c_uint = 4273;
pub const CL_RG: ::std::os::raw::c_uint = 4274;
pub const CL_RA: ::std::os::raw::c_uint = 4275;
pub const CL_RGB: ::std::os::raw::c_uint = 4276;
pub const CL_RGBA: ::std::os::raw::c_uint = 4277;
pub const CL_BGRA: ::std::os::raw::c_uint = 4278;
pub const CL_ARGB: ::std::os::raw::c_uint = 4279;
pub const CL_INTENSITY: ::std::os::raw::c_uint = 4280;
pub const CL_LUMINANCE: ::std::os::raw::c_uint = 4281;
pub const CL_Rx: ::std::os::raw::c_uint = 4282;
pub const CL_RGx: ::std::os::raw::c_uint = 4283;
pub const CL_RGBx: ::std::os::raw::c_uint = 4284;
pub const CL_DEPTH: ::std::os::raw::c_uint = 4285;
pub const CL_DEPTH_STENCIL: ::std::os::raw::c_uint = 4286;
pub const CL_SNORM_INT8: ::std::os::raw::c_uint = 4304;
pub const CL_SNORM_INT16: ::std::os::raw::c_uint = 4305;
pub const CL_UNORM_INT8: ::std::os::raw::c_uint = 4306;
pub const CL_UNORM_INT16: ::std::os::raw::c_uint = 4307;
pub const CL_UNORM_SHORT_565: ::std::os::raw::c_uint = 4308;
pub const CL_UNORM_SHORT_555: ::std::os::raw::c_uint = 4309;
pub const CL_UNORM_INT_101010: ::std::os::raw::c_uint = 4310;
pub const CL_SIGNED_INT8: ::std::os::raw::c_uint = 4311;
pub const CL_SIGNED_INT16: ::std::os::raw::c_uint = 4312;
pub const CL_SIGNED_INT32: ::std::os::raw::c_uint = 4313;
pub const CL_UNSIGNED_INT8: ::std::os::raw::c_uint = 4314;
pub const CL_UNSIGNED_INT16: ::std::os::raw::c_uint = 4315;
pub const CL_UNSIGNED_INT32: ::std::os::raw::c_uint = 4316;
pub const CL_HALF_FLOAT: ::std::os::raw::c_uint = 4317;
pub const CL_FLOAT: ::std::os::raw::c_uint = 4318;
pub const CL_UNORM_INT24: ::std::os::raw::c_uint = 4319;
pub const CL_MEM_OBJECT_BUFFER: ::std::os::raw::c_uint = 4336;
pub const CL_MEM_OBJECT_IMAGE2D: ::std::os::raw::c_uint = 4337;
pub const CL_MEM_OBJECT_IMAGE3D: ::std::os::raw::c_uint = 4338;
pub const CL_MEM_OBJECT_IMAGE2D_ARRAY: ::std::os::raw::c_uint = 4339;
pub const CL_MEM_OBJECT_IMAGE1D: ::std::os::raw::c_uint = 4340;
pub const CL_MEM_OBJECT_IMAGE1D_ARRAY: ::std::os::raw::c_uint = 4341;
pub const CL_MEM_OBJECT_IMAGE1D_BUFFER: ::std::os::raw::c_uint = 4342;
pub const CL_MEM_TYPE: ::std::os::raw::c_uint = 4352;
pub const CL_MEM_FLAGS: ::std::os::raw::c_uint = 4353;
pub const CL_MEM_SIZE: ::std::os::raw::c_uint = 4354;
pub const CL_MEM_HOST_PTR: ::std::os::raw::c_uint = 4355;
pub const CL_MEM_MAP_COUNT: ::std::os::raw::c_uint = 4356;
pub const CL_MEM_REFERENCE_COUNT: ::std::os::raw::c_uint = 4357;
pub const CL_MEM_CONTEXT: ::std::os::raw::c_uint = 4358;
pub const CL_MEM_ASSOCIATED_MEMOBJECT: ::std::os::raw::c_uint = 4359;
pub const CL_MEM_OFFSET: ::std::os::raw::c_uint = 4360;
pub const CL_IMAGE_FORMAT: ::std::os::raw::c_uint = 4368;
pub const CL_IMAGE_ELEMENT_SIZE: ::std::os::raw::c_uint = 4369;
pub const CL_IMAGE_ROW_PITCH: ::std::os::raw::c_uint = 4370;
pub const CL_IMAGE_SLICE_PITCH: ::std::os::raw::c_uint = 4371;
pub const CL_IMAGE_WIDTH: ::std::os::raw::c_uint = 4372;
pub const CL_IMAGE_HEIGHT: ::std::os::raw::c_uint = 4373;
pub const CL_IMAGE_DEPTH: ::std::os::raw::c_uint = 4374;
pub const CL_IMAGE_ARRAY_SIZE: ::std::os::raw::c_uint = 4375;
pub const CL_IMAGE_BUFFER: ::std::os::raw::c_uint = 4376;
pub const CL_IMAGE_NUM_MIP_LEVELS: ::std::os::raw::c_uint = 4377;
pub const CL_IMAGE_NUM_SAMPLES: ::std::os::raw::c_uint = 4378;
pub const CL_ADDRESS_NONE: ::std::os::raw::c_uint = 4400;
pub const CL_ADDRESS_CLAMP_TO_EDGE: ::std::os::raw::c_uint = 4401;
pub const CL_ADDRESS_CLAMP: ::std::os::raw::c_uint = 4402;
pub const CL_ADDRESS_REPEAT: ::std::os::raw::c_uint = 4403;
pub const CL_ADDRESS_MIRRORED_REPEAT: ::std::os::raw::c_uint = 4404;
pub const CL_FILTER_NEAREST: ::std::os::raw::c_uint = 4416;
pub const CL_FILTER_LINEAR: ::std::os::raw::c_uint = 4417;
pub const CL_SAMPLER_REFERENCE_COUNT: ::std::os::raw::c_uint = 4432;
pub const CL_SAMPLER_CONTEXT: ::std::os::raw::c_uint = 4433;
pub const CL_SAMPLER_NORMALIZED_COORDS: ::std::os::raw::c_uint = 4434;
pub const CL_SAMPLER_ADDRESSING_MODE: ::std::os::raw::c_uint = 4435;
pub const CL_SAMPLER_FILTER_MODE: ::std::os::raw::c_uint = 4436;
pub const CL_MAP_READ: ::std::os::raw::c_uint = 1;
pub const CL_MAP_WRITE: ::std::os::raw::c_uint = 2;
pub const CL_MAP_WRITE_INVALIDATE_REGION: ::std::os::raw::c_uint = 4;
pub const CL_PROGRAM_REFERENCE_COUNT: ::std::os::raw::c_uint = 4448;
pub const CL_PROGRAM_CONTEXT: ::std::os::raw::c_uint = 4449;
pub const CL_PROGRAM_NUM_DEVICES: ::std::os::raw::c_uint = 4450;
pub const CL_PROGRAM_DEVICES: ::std::os::raw::c_uint = 4451;
pub const CL_PROGRAM_SOURCE: ::std::os::raw::c_uint = 4452;
pub const CL_PROGRAM_BINARY_SIZES: ::std::os::raw::c_uint = 4453;
pub const CL_PROGRAM_BINARIES: ::std::os::raw::c_uint = 4454;
pub const CL_PROGRAM_NUM_KERNELS: ::std::os::raw::c_uint = 4455;
pub const CL_PROGRAM_KERNEL_NAMES: ::std::os::raw::c_uint = 4456;
pub const CL_PROGRAM_BUILD_STATUS: ::std::os::raw::c_uint = 4481;
pub const CL_PROGRAM_BUILD_OPTIONS: ::std::os::raw::c_uint = 4482;
pub const CL_PROGRAM_BUILD_LOG: ::std::os::raw::c_uint = 4483;
pub const CL_PROGRAM_BINARY_TYPE: ::std::os::raw::c_uint = 4484;
pub const CL_PROGRAM_BINARY_TYPE_NONE: ::std::os::raw::c_uint = 0;
pub const CL_PROGRAM_BINARY_TYPE_COMPILED_OBJECT: ::std::os::raw::c_uint = 1;
pub const CL_PROGRAM_BINARY_TYPE_LIBRARY: ::std::os::raw::c_uint = 2;
pub const CL_PROGRAM_BINARY_TYPE_EXECUTABLE: ::std::os::raw::c_uint = 4;
pub const CL_BUILD_SUCCESS: ::std::os::raw::c_uint = 0;
pub const CL_BUILD_NONE: ::std::os::raw::c_int = -1;
pub const CL_BUILD_ERROR: ::std::os::raw::c_int = -2;
pub const CL_BUILD_IN_PROGRESS: ::std::os::raw::c_int = -3;
pub const CL_KERNEL_FUNCTION_NAME: ::std::os::raw::c_uint = 4496;
pub const CL_KERNEL_NUM_ARGS: ::std::os::raw::c_uint = 4497;
pub const CL_KERNEL_REFERENCE_COUNT: ::std::os::raw::c_uint = 4498;
pub const CL_KERNEL_CONTEXT: ::std::os::raw::c_uint = 4499;
pub const CL_KERNEL_PROGRAM: ::std::os::raw::c_uint = 4500;
pub const CL_KERNEL_ATTRIBUTES: ::std::os::raw::c_uint = 4501;
pub const CL_KERNEL_ARG_ADDRESS_QUALIFIER: ::std::os::raw::c_uint = 4502;
pub const CL_KERNEL_ARG_ACCESS_QUALIFIER: ::std::os::raw::c_uint = 4503;
pub const CL_KERNEL_ARG_TYPE_NAME: ::std::os::raw::c_uint = 4504;
pub const CL_KERNEL_ARG_TYPE_QUALIFIER: ::std::os::raw::c_uint = 4505;
pub const CL_KERNEL_ARG_NAME: ::std::os::raw::c_uint = 4506;
pub const CL_KERNEL_ARG_ADDRESS_GLOBAL: ::std::os::raw::c_uint = 4507;
pub const CL_KERNEL_ARG_ADDRESS_LOCAL: ::std::os::raw::c_uint = 4508;
pub const CL_KERNEL_ARG_ADDRESS_CONSTANT: ::std::os::raw::c_uint = 4509;
pub const CL_KERNEL_ARG_ADDRESS_PRIVATE: ::std::os::raw::c_uint = 4510;
pub const CL_KERNEL_ARG_ACCESS_READ_ONLY: ::std::os::raw::c_uint = 4512;
pub const CL_KERNEL_ARG_ACCESS_WRITE_ONLY: ::std::os::raw::c_uint = 4513;
pub const CL_KERNEL_ARG_ACCESS_READ_WRITE: ::std::os::raw::c_uint = 4514;
pub const CL_KERNEL_ARG_ACCESS_NONE: ::std::os::raw::c_uint = 4515;
pub const CL_KERNEL_ARG_TYPE_NONE: ::std::os::raw::c_uint = 0;
pub const CL_KERNEL_ARG_TYPE_CONST: ::std::os::raw::c_uint = 1;
pub const CL_KERNEL_ARG_TYPE_RESTRICT: ::std::os::raw::c_uint = 2;
pub const CL_KERNEL_ARG_TYPE_VOLATILE: ::std::os::raw::c_uint = 4;
pub const CL_KERNEL_WORK_GROUP_SIZE: ::std::os::raw::c_uint = 4528;
pub const CL_KERNEL_COMPILE_WORK_GROUP_SIZE: ::std::os::raw::c_uint = 4529;
pub const CL_KERNEL_LOCAL_MEM_SIZE: ::std::os::raw::c_uint = 4530;
pub const CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE: ::std::os::raw::c_uint
          =
    4531;
pub const CL_KERNEL_PRIVATE_MEM_SIZE: ::std::os::raw::c_uint = 4532;
pub const CL_KERNEL_GLOBAL_WORK_SIZE: ::std::os::raw::c_uint = 4533;
pub const CL_EVENT_COMMAND_QUEUE: ::std::os::raw::c_uint = 4560;
pub const CL_EVENT_COMMAND_TYPE: ::std::os::raw::c_uint = 4561;
pub const CL_EVENT_REFERENCE_COUNT: ::std::os::raw::c_uint = 4562;
pub const CL_EVENT_COMMAND_EXECUTION_STATUS: ::std::os::raw::c_uint = 4563;
pub const CL_EVENT_CONTEXT: ::std::os::raw::c_uint = 4564;
pub const CL_COMMAND_NDRANGE_KERNEL: ::std::os::raw::c_uint = 4592;
pub const CL_COMMAND_TASK: ::std::os::raw::c_uint = 4593;
pub const CL_COMMAND_NATIVE_KERNEL: ::std::os::raw::c_uint = 4594;
pub const CL_COMMAND_READ_BUFFER: ::std::os::raw::c_uint = 4595;
pub const CL_COMMAND_WRITE_BUFFER: ::std::os::raw::c_uint = 4596;
pub const CL_COMMAND_COPY_BUFFER: ::std::os::raw::c_uint = 4597;
pub const CL_COMMAND_READ_IMAGE: ::std::os::raw::c_uint = 4598;
pub const CL_COMMAND_WRITE_IMAGE: ::std::os::raw::c_uint = 4599;
pub const CL_COMMAND_COPY_IMAGE: ::std::os::raw::c_uint = 4600;
pub const CL_COMMAND_COPY_IMAGE_TO_BUFFER: ::std::os::raw::c_uint = 4601;
pub const CL_COMMAND_COPY_BUFFER_TO_IMAGE: ::std::os::raw::c_uint = 4602;
pub const CL_COMMAND_MAP_BUFFER: ::std::os::raw::c_uint = 4603;
pub const CL_COMMAND_MAP_IMAGE: ::std::os::raw::c_uint = 4604;
pub const CL_COMMAND_UNMAP_MEM_OBJECT: ::std::os::raw::c_uint = 4605;
pub const CL_COMMAND_MARKER: ::std::os::raw::c_uint = 4606;
pub const CL_COMMAND_ACQUIRE_GL_OBJECTS: ::std::os::raw::c_uint = 4607;
pub const CL_COMMAND_RELEASE_GL_OBJECTS: ::std::os::raw::c_uint = 4608;
pub const CL_COMMAND_READ_BUFFER_RECT: ::std::os::raw::c_uint = 4609;
pub const CL_COMMAND_WRITE_BUFFER_RECT: ::std::os::raw::c_uint = 4610;
pub const CL_COMMAND_COPY_BUFFER_RECT: ::std::os::raw::c_uint = 4611;
pub const CL_COMMAND_USER: ::std::os::raw::c_uint = 4612;
pub const CL_COMMAND_BARRIER: ::std::os::raw::c_uint = 4613;
pub const CL_COMMAND_MIGRATE_MEM_OBJECTS: ::std::os::raw::c_uint = 4614;
pub const CL_COMMAND_FILL_BUFFER: ::std::os::raw::c_uint = 4615;
pub const CL_COMMAND_FILL_IMAGE: ::std::os::raw::c_uint = 4616;
pub const CL_COMPLETE: ::std::os::raw::c_uint = 0;
pub const CL_RUNNING: ::std::os::raw::c_uint = 1;
pub const CL_SUBMITTED: ::std::os::raw::c_uint = 2;
pub const CL_QUEUED: ::std::os::raw::c_uint = 3;
pub const CL_BUFFER_CREATE_TYPE_REGION: ::std::os::raw::c_uint = 4640;
pub const CL_PROFILING_COMMAND_QUEUED: ::std::os::raw::c_uint = 4736;
pub const CL_PROFILING_COMMAND_SUBMIT: ::std::os::raw::c_uint = 4737;
pub const CL_PROFILING_COMMAND_START: ::std::os::raw::c_uint = 4738;
pub const CL_PROFILING_COMMAND_END: ::std::os::raw::c_uint = 4739;
pub const CL_GL_OBJECT_BUFFER: ::std::os::raw::c_uint = 8192;
pub const CL_GL_OBJECT_TEXTURE2D: ::std::os::raw::c_uint = 8193;
pub const CL_GL_OBJECT_TEXTURE3D: ::std::os::raw::c_uint = 8194;
pub const CL_GL_OBJECT_RENDERBUFFER: ::std::os::raw::c_uint = 8195;
pub const CL_GL_OBJECT_TEXTURE2D_ARRAY: ::std::os::raw::c_uint = 8206;
pub const CL_GL_OBJECT_TEXTURE1D: ::std::os::raw::c_uint = 8207;
pub const CL_GL_OBJECT_TEXTURE1D_ARRAY: ::std::os::raw::c_uint = 8208;
pub const CL_GL_OBJECT_TEXTURE_BUFFER: ::std::os::raw::c_uint = 8209;
pub const CL_GL_TEXTURE_TARGET: ::std::os::raw::c_uint = 8196;
pub const CL_GL_MIPMAP_LEVEL: ::std::os::raw::c_uint = 8197;
pub const CL_GL_NUM_SAMPLES: ::std::os::raw::c_uint = 8210;
pub const kCGLMonoscopicBit: ::std::os::raw::c_uint = 1;
pub const kCGLStereoscopicBit: ::std::os::raw::c_uint = 2;
pub const kCGLSingleBufferBit: ::std::os::raw::c_uint = 4;
pub const kCGLDoubleBufferBit: ::std::os::raw::c_uint = 8;
pub const kCGLTripleBufferBit: ::std::os::raw::c_uint = 16;
pub const kCGL0Bit: ::std::os::raw::c_uint = 1;
pub const kCGL1Bit: ::std::os::raw::c_uint = 2;
pub const kCGL2Bit: ::std::os::raw::c_uint = 4;
pub const kCGL3Bit: ::std::os::raw::c_uint = 8;
pub const kCGL4Bit: ::std::os::raw::c_uint = 16;
pub const kCGL5Bit: ::std::os::raw::c_uint = 32;
pub const kCGL6Bit: ::std::os::raw::c_uint = 64;
pub const kCGL8Bit: ::std::os::raw::c_uint = 128;
pub const kCGL10Bit: ::std::os::raw::c_uint = 256;
pub const kCGL12Bit: ::std::os::raw::c_uint = 512;
pub const kCGL16Bit: ::std::os::raw::c_uint = 1024;
pub const kCGL24Bit: ::std::os::raw::c_uint = 2048;
pub const kCGL32Bit: ::std::os::raw::c_uint = 4096;
pub const kCGL48Bit: ::std::os::raw::c_uint = 8192;
pub const kCGL64Bit: ::std::os::raw::c_uint = 16384;
pub const kCGL96Bit: ::std::os::raw::c_uint = 32768;
pub const kCGL128Bit: ::std::os::raw::c_uint = 65536;
pub const kCGLRGB444Bit: ::std::os::raw::c_uint = 64;
pub const kCGLARGB4444Bit: ::std::os::raw::c_uint = 128;
pub const kCGLRGB444A8Bit: ::std::os::raw::c_uint = 256;
pub const kCGLRGB555Bit: ::std::os::raw::c_uint = 512;
pub const kCGLARGB1555Bit: ::std::os::raw::c_uint = 1024;
pub const kCGLRGB555A8Bit: ::std::os::raw::c_uint = 2048;
pub const kCGLRGB565Bit: ::std::os::raw::c_uint = 4096;
pub const kCGLRGB565A8Bit: ::std::os::raw::c_uint = 8192;
pub const kCGLRGB888Bit: ::std::os::raw::c_uint = 16384;
pub const kCGLARGB8888Bit: ::std::os::raw::c_uint = 32768;
pub const kCGLRGB888A8Bit: ::std::os::raw::c_uint = 65536;
pub const kCGLRGB101010Bit: ::std::os::raw::c_uint = 131072;
pub const kCGLARGB2101010Bit: ::std::os::raw::c_uint = 262144;
pub const kCGLRGB101010_A8Bit: ::std::os::raw::c_uint = 524288;
pub const kCGLRGB121212Bit: ::std::os::raw::c_uint = 1048576;
pub const kCGLARGB12121212Bit: ::std::os::raw::c_uint = 2097152;
pub const kCGLRGB161616Bit: ::std::os::raw::c_uint = 4194304;
pub const kCGLRGBA16161616Bit: ::std::os::raw::c_uint = 8388608;
pub const kCGLRGBFloat64Bit: ::std::os::raw::c_uint = 16777216;
pub const kCGLRGBAFloat64Bit: ::std::os::raw::c_uint = 33554432;
pub const kCGLRGBFloat128Bit: ::std::os::raw::c_uint = 67108864;
pub const kCGLRGBAFloat128Bit: ::std::os::raw::c_uint = 134217728;
pub const kCGLRGBFloat256Bit: ::std::os::raw::c_uint = 268435456;
pub const kCGLRGBAFloat256Bit: ::std::os::raw::c_uint = 536870912;
pub const kCGLSupersampleBit: ::std::os::raw::c_uint = 1;
pub const kCGLMultisampleBit: ::std::os::raw::c_uint = 2;
pub const kCGLARGB16161616Bit: ::std::os::raw::c_uint = 8388608;
pub const CL_CONTEXT_PROPERTY_USE_CGL_SHAREGROUP_APPLE: ::std::os::raw::c_uint
          =
    268435456;
pub const CL_CGL_DEVICE_FOR_CURRENT_VIRTUAL_SCREEN_APPLE:
          ::std::os::raw::c_uint =
    268435458;
pub const CL_CGL_DEVICES_FOR_SUPPORTED_VIRTUAL_SCREENS_APPLE:
          ::std::os::raw::c_uint =
    268435459;
pub const CL_INVALID_GL_CONTEXT_APPLE: ::std::os::raw::c_int = -1000;
pub const CL_COMMAND_GL_FENCE_SYNC_OBJECT_KHR: ::std::os::raw::c_uint = 8205;
pub const CL_IOSURFACE_REF_APPLE: ::std::os::raw::c_uint = 268435481;
pub const CL_IOSURFACE_PLANE_APPLE: ::std::os::raw::c_uint = 268435482;
pub const CL_IMAGE_IOSURFACE_APPLE: ::std::os::raw::c_uint = 268435483;
pub const CL_IMAGE_IOSURFACE_PLANE_APPLE: ::std::os::raw::c_uint = 268435484;
pub const __GNUC_VA_LIST: ::std::os::raw::c_uint = 1;
pub const CL_DEVICE_HALF_FP_CONFIG: ::std::os::raw::c_uint = 4147;
pub const CL_INVALID_ARG_NAME_APPLE: ::std::os::raw::c_int = -1060;
pub const CL_PROGRAM_NUM_KERNELS_APPLE: ::std::os::raw::c_uint = 268435460;
pub const CL_PROGRAM_KERNEL_NAMES_APPLE: ::std::os::raw::c_uint = 268435461;
pub const CL_1RGB_APPLE: ::std::os::raw::c_uint = 268435462;
pub const CL_BGR1_APPLE: ::std::os::raw::c_uint = 268435463;
pub const CL_SFIXED14_APPLE: ::std::os::raw::c_uint = 268435464;
pub const CL_BIASED_HALF_APPLE: ::std::os::raw::c_uint = 268435465;
pub const CL_YCbYCr_APPLE: ::std::os::raw::c_uint = 268435472;
pub const CL_CbYCrY_APPLE: ::std::os::raw::c_uint = 268435473;
pub const CL_ABGR_APPLE: ::std::os::raw::c_uint = 268435474;
pub const cl_APPLE_command_queue_priority: ::std::os::raw::c_uint = 1;
pub const cl_APPLE_command_queue_select_compute_units: ::std::os::raw::c_uint
          =
    1;
pub const CL_QUEUE_PRIORITY_APPLE: ::std::os::raw::c_uint = 268435475;
pub const CL_QUEUE_NUM_COMPUTE_UNITS_APPLE: ::std::os::raw::c_uint =
    268435476;
pub const CL_QUEUE_PRIORITY_BACKGROUND_APPLE: ::std::os::raw::c_uint =
    268435477;
pub const CL_QUEUE_PRIORITY_DEFAULT_APPLE: ::std::os::raw::c_uint = 268435478;
pub const CL_OBJECT_NAME_APPLE: ::std::os::raw::c_uint = 268435480;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
pub union _bindgen_ty_1 {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_1>() , 128usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_1>() , 8usize);
}
pub type __mbstate_t = _bindgen_ty_1;
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(::std::mem::size_of::<__darwin_pthread_handler_rec>() ,
               24usize);
    assert_eq!(::std::mem::align_of::<__darwin_pthread_handler_rec>() ,
               8usize);
}
impl Clone for __darwin_pthread_handler_rec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_attr_t>() , 64usize);
    assert_eq!(::std::mem::align_of::<_opaque_pthread_attr_t>() , 8usize);
}
#[repr(C)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_cond_t>() , 48usize);
    assert_eq!(::std::mem::align_of::<_opaque_pthread_cond_t>() , 8usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_condattr_t>() , 16usize);
    assert_eq!(::std::mem::align_of::<_opaque_pthread_condattr_t>() , 8usize);
}
impl Clone for _opaque_pthread_condattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_mutex_t>() , 64usize);
    assert_eq!(::std::mem::align_of::<_opaque_pthread_mutex_t>() , 8usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_mutexattr_t>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_opaque_pthread_mutexattr_t>() ,
               8usize);
}
impl Clone for _opaque_pthread_mutexattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_once_t>() , 16usize);
    assert_eq!(::std::mem::align_of::<_opaque_pthread_once_t>() , 8usize);
}
impl Clone for _opaque_pthread_once_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_rwlock_t>() , 200usize);
    assert_eq!(::std::mem::align_of::<_opaque_pthread_rwlock_t>() , 8usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() ,
               24usize);
    assert_eq!(::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() ,
               8usize);
}
impl Clone for _opaque_pthread_rwlockattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_t>() , 8192usize);
    assert_eq!(::std::mem::align_of::<_opaque_pthread_t>() , 8usize);
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type cl_char = i8;
pub type cl_uchar = u8;
pub type cl_short = i16;
pub type cl_ushort = u16;
pub type cl_int = i32;
pub type cl_uint = u32;
pub type cl_long = i64;
pub type cl_ulong = u64;
pub type cl_half = u16;
pub type cl_float = f32;
pub type cl_double = f64;
pub type rsize_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = f64;
pub type cl_GLuint = ::std::os::raw::c_uint;
pub type cl_GLint = ::std::os::raw::c_int;
pub type cl_GLenum = ::std::os::raw::c_uint;
pub type __m64 = [::std::os::raw::c_longlong; 1usize];
pub type __v1di = [::std::os::raw::c_longlong; 1usize];
pub type __v2si = [::std::os::raw::c_int; 2usize];
pub type __v4hi = [::std::os::raw::c_short; 4usize];
pub type __v8qi = [::std::os::raw::c_char; 8usize];
pub type __v4si = [::std::os::raw::c_int; 4usize];
pub type __v4sf = [f32; 4usize];
pub type __m128 = [f32; 4usize];
pub type __v4su = [::std::os::raw::c_uint; 4usize];
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub const P_ALL: _bindgen_ty_2 = _bindgen_ty_2::P_ALL;
pub const P_PID: _bindgen_ty_2 = _bindgen_ty_2::P_PID;
pub const P_PGID: _bindgen_ty_2 = _bindgen_ty_2::P_PGID;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_2 { P_ALL = 0, P_PID = 1, P_PGID = 2, }
pub use self::_bindgen_ty_2 as idtype_t;
pub type pid_t = __darwin_pid_t;
pub type id_t = __darwin_id_t;
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_i386_thread_state {
    pub __eax: ::std::os::raw::c_uint,
    pub __ebx: ::std::os::raw::c_uint,
    pub __ecx: ::std::os::raw::c_uint,
    pub __edx: ::std::os::raw::c_uint,
    pub __edi: ::std::os::raw::c_uint,
    pub __esi: ::std::os::raw::c_uint,
    pub __ebp: ::std::os::raw::c_uint,
    pub __esp: ::std::os::raw::c_uint,
    pub __ss: ::std::os::raw::c_uint,
    pub __eflags: ::std::os::raw::c_uint,
    pub __eip: ::std::os::raw::c_uint,
    pub __cs: ::std::os::raw::c_uint,
    pub __ds: ::std::os::raw::c_uint,
    pub __es: ::std::os::raw::c_uint,
    pub __fs: ::std::os::raw::c_uint,
    pub __gs: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_i386_thread_state() {
    assert_eq!(::std::mem::size_of::<__darwin_i386_thread_state>() , 64usize);
    assert_eq!(::std::mem::align_of::<__darwin_i386_thread_state>() , 4usize);
}
impl Clone for __darwin_i386_thread_state {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_fp_control {
    pub _bitfield_1: u16,
}
#[test]
fn bindgen_test_layout___darwin_fp_control() {
    assert_eq!(::std::mem::size_of::<__darwin_fp_control>() , 2usize);
    assert_eq!(::std::mem::align_of::<__darwin_fp_control>() , 2usize);
}
impl Clone for __darwin_fp_control {
    fn clone(&self) -> Self { *self }
}
impl __darwin_fp_control {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (1usize as u16)) >>
                                       0u32) as u16)
        }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        self._bitfield_1 &= !(1usize as u16);
        self._bitfield_1 |= ((val as u16 as u16) << 0u32) & (1usize as u16);
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (2usize as u16)) >>
                                       1u32) as u16)
        }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        self._bitfield_1 &= !(2usize as u16);
        self._bitfield_1 |= ((val as u16 as u16) << 1u32) & (2usize as u16);
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (4usize as u16)) >>
                                       2u32) as u16)
        }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        self._bitfield_1 &= !(4usize as u16);
        self._bitfield_1 |= ((val as u16 as u16) << 2u32) & (4usize as u16);
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (8usize as u16)) >>
                                       3u32) as u16)
        }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        self._bitfield_1 &= !(8usize as u16);
        self._bitfield_1 |= ((val as u16 as u16) << 3u32) & (8usize as u16);
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (16usize as u16)) >>
                                       4u32) as u16)
        }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        self._bitfield_1 &= !(16usize as u16);
        self._bitfield_1 |= ((val as u16 as u16) << 4u32) & (16usize as u16);
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (32usize as u16)) >>
                                       5u32) as u16)
        }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        self._bitfield_1 &= !(32usize as u16);
        self._bitfield_1 |= ((val as u16 as u16) << 5u32) & (32usize as u16);
    }
    #[inline]
    pub fn at_offset_6(&self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (192usize as u16)) >>
                                       6u32) as u16)
        }
    }
    #[inline]
    pub fn set_at_offset_6(&mut self, val: ::std::os::raw::c_ushort) {
        self._bitfield_1 &= !(192usize as u16);
        self._bitfield_1 |= ((val as u16 as u16) << 6u32) & (192usize as u16);
    }
    #[inline]
    pub fn __pc(&self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (768usize as u16)) >>
                                       8u32) as u16)
        }
    }
    #[inline]
    pub fn set___pc(&mut self, val: ::std::os::raw::c_ushort) {
        self._bitfield_1 &= !(768usize as u16);
        self._bitfield_1 |= ((val as u16 as u16) << 8u32) & (768usize as u16);
    }
    #[inline]
    pub fn __rc(&self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (3072usize as u16)) >>
                                       10u32) as u16)
        }
    }
    #[inline]
    pub fn set___rc(&mut self, val: ::std::os::raw::c_ushort) {
        self._bitfield_1 &= !(3072usize as u16);
        self._bitfield_1 |=
            ((val as u16 as u16) << 10u32) & (3072usize as u16);
    }
    #[inline]
    pub fn at_offset_12(&self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (4096usize as u16)) >>
                                       12u32) as u16)
        }
    }
    #[inline]
    pub fn set_at_offset_12(&mut self, val: ::std::os::raw::c_ushort) {
        self._bitfield_1 &= !(4096usize as u16);
        self._bitfield_1 |=
            ((val as u16 as u16) << 12u32) & (4096usize as u16);
    }
    #[inline]
    pub fn at_offset_13(&self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (57344usize as u16)) >>
                                       13u32) as u16)
        }
    }
    #[inline]
    pub fn set_at_offset_13(&mut self, val: ::std::os::raw::c_ushort) {
        self._bitfield_1 &= !(57344usize as u16);
        self._bitfield_1 |=
            ((val as u16 as u16) << 13u32) & (57344usize as u16);
    }
}
pub type __darwin_fp_control_t = __darwin_fp_control;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_fp_status {
    pub _bitfield_1: u16,
}
#[test]
fn bindgen_test_layout___darwin_fp_status() {
    assert_eq!(::std::mem::size_of::<__darwin_fp_status>() , 2usize);
    assert_eq!(::std::mem::align_of::<__darwin_fp_status>() , 2usize);
}
impl Clone for __darwin_fp_status {
    fn clone(&self) -> Self { *self }
}
impl __darwin_fp_status {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (1usize as u16)) >>
                                       0u32) as u16)
        }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        self._bitfield_1 &= !(1usize as u16);
        self._bitfield_1 |= ((val as u16 as u16) << 0u32) & (1usize as u16);
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (2usize as u16)) >>
                                       1u32) as u16)
        }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        self._bitfield_1 &= !(2usize as u16);
        self._bitfield_1 |= ((val as u16 as u16) << 1u32) & (2usize as u16);
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (4usize as u16)) >>
                                       2u32) as u16)
        }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        self._bitfield_1 &= !(4usize as u16);
        self._bitfield_1 |= ((val as u16 as u16) << 2u32) & (4usize as u16);
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (8usize as u16)) >>
                                       3u32) as u16)
        }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        self._bitfield_1 &= !(8usize as u16);
        self._bitfield_1 |= ((val as u16 as u16) << 3u32) & (8usize as u16);
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (16usize as u16)) >>
                                       4u32) as u16)
        }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        self._bitfield_1 &= !(16usize as u16);
        self._bitfield_1 |= ((val as u16 as u16) << 4u32) & (16usize as u16);
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (32usize as u16)) >>
                                       5u32) as u16)
        }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        self._bitfield_1 &= !(32usize as u16);
        self._bitfield_1 |= ((val as u16 as u16) << 5u32) & (32usize as u16);
    }
    #[inline]
    pub fn __stkflt(&self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (64usize as u16)) >>
                                       6u32) as u16)
        }
    }
    #[inline]
    pub fn set___stkflt(&mut self, val: ::std::os::raw::c_ushort) {
        self._bitfield_1 &= !(64usize as u16);
        self._bitfield_1 |= ((val as u16 as u16) << 6u32) & (64usize as u16);
    }
    #[inline]
    pub fn __errsumm(&self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (128usize as u16)) >>
                                       7u32) as u16)
        }
    }
    #[inline]
    pub fn set___errsumm(&mut self, val: ::std::os::raw::c_ushort) {
        self._bitfield_1 &= !(128usize as u16);
        self._bitfield_1 |= ((val as u16 as u16) << 7u32) & (128usize as u16);
    }
    #[inline]
    pub fn __c0(&self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (256usize as u16)) >>
                                       8u32) as u16)
        }
    }
    #[inline]
    pub fn set___c0(&mut self, val: ::std::os::raw::c_ushort) {
        self._bitfield_1 &= !(256usize as u16);
        self._bitfield_1 |= ((val as u16 as u16) << 8u32) & (256usize as u16);
    }
    #[inline]
    pub fn __c1(&self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (512usize as u16)) >>
                                       9u32) as u16)
        }
    }
    #[inline]
    pub fn set___c1(&mut self, val: ::std::os::raw::c_ushort) {
        self._bitfield_1 &= !(512usize as u16);
        self._bitfield_1 |= ((val as u16 as u16) << 9u32) & (512usize as u16);
    }
    #[inline]
    pub fn __c2(&self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (1024usize as u16)) >>
                                       10u32) as u16)
        }
    }
    #[inline]
    pub fn set___c2(&mut self, val: ::std::os::raw::c_ushort) {
        self._bitfield_1 &= !(1024usize as u16);
        self._bitfield_1 |=
            ((val as u16 as u16) << 10u32) & (1024usize as u16);
    }
    #[inline]
    pub fn __tos(&self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (14336usize as u16)) >>
                                       11u32) as u16)
        }
    }
    #[inline]
    pub fn set___tos(&mut self, val: ::std::os::raw::c_ushort) {
        self._bitfield_1 &= !(14336usize as u16);
        self._bitfield_1 |=
            ((val as u16 as u16) << 11u32) & (14336usize as u16);
    }
    #[inline]
    pub fn __c3(&self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (16384usize as u16)) >>
                                       14u32) as u16)
        }
    }
    #[inline]
    pub fn set___c3(&mut self, val: ::std::os::raw::c_ushort) {
        self._bitfield_1 &= !(16384usize as u16);
        self._bitfield_1 |=
            ((val as u16 as u16) << 14u32) & (16384usize as u16);
    }
    #[inline]
    pub fn __busy(&self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (32768usize as u16)) >>
                                       15u32) as u16)
        }
    }
    #[inline]
    pub fn set___busy(&mut self, val: ::std::os::raw::c_ushort) {
        self._bitfield_1 &= !(32768usize as u16);
        self._bitfield_1 |=
            ((val as u16 as u16) << 15u32) & (32768usize as u16);
    }
}
pub type __darwin_fp_status_t = __darwin_fp_status;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_mmst_reg {
    pub __mmst_reg: [::std::os::raw::c_char; 10usize],
    pub __mmst_rsrv: [::std::os::raw::c_char; 6usize],
}
#[test]
fn bindgen_test_layout___darwin_mmst_reg() {
    assert_eq!(::std::mem::size_of::<__darwin_mmst_reg>() , 16usize);
    assert_eq!(::std::mem::align_of::<__darwin_mmst_reg>() , 1usize);
}
impl Clone for __darwin_mmst_reg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_xmm_reg {
    pub __xmm_reg: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_xmm_reg() {
    assert_eq!(::std::mem::size_of::<__darwin_xmm_reg>() , 16usize);
    assert_eq!(::std::mem::align_of::<__darwin_xmm_reg>() , 1usize);
}
impl Clone for __darwin_xmm_reg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct __darwin_i386_float_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_i386_float_state() {
    assert_eq!(::std::mem::size_of::<__darwin_i386_float_state>() , 524usize);
    assert_eq!(::std::mem::align_of::<__darwin_i386_float_state>() , 4usize);
}
#[repr(C)]
pub struct __darwin_i386_avx_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_i386_avx_state() {
    assert_eq!(::std::mem::size_of::<__darwin_i386_avx_state>() , 716usize);
    assert_eq!(::std::mem::align_of::<__darwin_i386_avx_state>() , 4usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_i386_exception_state() {
    assert_eq!(::std::mem::size_of::<__darwin_i386_exception_state>() ,
               12usize);
    assert_eq!(::std::mem::align_of::<__darwin_i386_exception_state>() ,
               4usize);
}
impl Clone for __darwin_i386_exception_state {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_x86_debug_state32 {
    pub __dr0: ::std::os::raw::c_uint,
    pub __dr1: ::std::os::raw::c_uint,
    pub __dr2: ::std::os::raw::c_uint,
    pub __dr3: ::std::os::raw::c_uint,
    pub __dr4: ::std::os::raw::c_uint,
    pub __dr5: ::std::os::raw::c_uint,
    pub __dr6: ::std::os::raw::c_uint,
    pub __dr7: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state32() {
    assert_eq!(::std::mem::size_of::<__darwin_x86_debug_state32>() , 32usize);
    assert_eq!(::std::mem::align_of::<__darwin_x86_debug_state32>() , 4usize);
}
impl Clone for __darwin_x86_debug_state32 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_thread_state64() {
    assert_eq!(::std::mem::size_of::<__darwin_x86_thread_state64>() ,
               168usize);
    assert_eq!(::std::mem::align_of::<__darwin_x86_thread_state64>() ,
               8usize);
}
impl Clone for __darwin_x86_thread_state64 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct __darwin_x86_float_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_x86_float_state64() {
    assert_eq!(::std::mem::size_of::<__darwin_x86_float_state64>() ,
               524usize);
    assert_eq!(::std::mem::align_of::<__darwin_x86_float_state64>() , 4usize);
}
#[repr(C)]
pub struct __darwin_x86_avx_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_x86_avx_state64() {
    assert_eq!(::std::mem::size_of::<__darwin_x86_avx_state64>() , 844usize);
    assert_eq!(::std::mem::align_of::<__darwin_x86_avx_state64>() , 4usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_exception_state64() {
    assert_eq!(::std::mem::size_of::<__darwin_x86_exception_state64>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<__darwin_x86_exception_state64>() ,
               8usize);
}
impl Clone for __darwin_x86_exception_state64 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state64() {
    assert_eq!(::std::mem::size_of::<__darwin_x86_debug_state64>() , 64usize);
    assert_eq!(::std::mem::align_of::<__darwin_x86_debug_state64>() , 8usize);
}
impl Clone for __darwin_x86_debug_state64 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_float_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext32() {
    assert_eq!(::std::mem::size_of::<__darwin_mcontext32>() , 600usize);
    assert_eq!(::std::mem::align_of::<__darwin_mcontext32>() , 4usize);
}
#[repr(C)]
pub struct __darwin_mcontext_avx32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx32() {
    assert_eq!(::std::mem::size_of::<__darwin_mcontext_avx32>() , 792usize);
    assert_eq!(::std::mem::align_of::<__darwin_mcontext_avx32>() , 4usize);
}
#[repr(C)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext64() {
    assert_eq!(::std::mem::size_of::<__darwin_mcontext64>() , 712usize);
    assert_eq!(::std::mem::align_of::<__darwin_mcontext64>() , 8usize);
}
#[repr(C)]
pub struct __darwin_mcontext_avx64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx64() {
    assert_eq!(::std::mem::size_of::<__darwin_mcontext_avx64>() , 1032usize);
    assert_eq!(::std::mem::align_of::<__darwin_mcontext_avx64>() , 8usize);
}
pub type mcontext_t = *mut __darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_sigaltstack() {
    assert_eq!(::std::mem::size_of::<__darwin_sigaltstack>() , 24usize);
    assert_eq!(::std::mem::align_of::<__darwin_sigaltstack>() , 8usize);
}
impl Clone for __darwin_sigaltstack {
    fn clone(&self) -> Self { *self }
}
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
#[test]
fn bindgen_test_layout___darwin_ucontext() {
    assert_eq!(::std::mem::size_of::<__darwin_ucontext>() , 56usize);
    assert_eq!(::std::mem::align_of::<__darwin_ucontext>() , 8usize);
}
impl Clone for __darwin_ucontext {
    fn clone(&self) -> Self { *self }
}
pub type ucontext_t = __darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
pub type uid_t = __darwin_uid_t;
#[repr(C)]
#[derive(Copy)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sigval() {
    assert_eq!(::std::mem::size_of::<sigval>() , 8usize);
    assert_eq!(::std::mem::align_of::<sigval>() , 8usize);
}
impl Clone for sigval {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent() {
    assert_eq!(::std::mem::size_of::<sigevent>() , 32usize);
    assert_eq!(::std::mem::align_of::<sigevent>() , 8usize);
}
impl Clone for sigevent {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
#[test]
fn bindgen_test_layout___siginfo() {
    assert_eq!(::std::mem::size_of::<__siginfo>() , 104usize);
    assert_eq!(::std::mem::align_of::<__siginfo>() , 8usize);
}
impl Clone for __siginfo {
    fn clone(&self) -> Self { *self }
}
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       ::std::os::raw::c_int,
                                                                   arg2:
                                                                       *mut __siginfo,
                                                                   arg3:
                                                                       *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout___sigaction_u() {
    assert_eq!(::std::mem::size_of::<__sigaction_u>() , 8usize);
    assert_eq!(::std::mem::align_of::<__sigaction_u>() , 8usize);
}
impl Clone for __sigaction_u {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut ::std::os::raw::c_void,
                                                             arg2:
                                                                 ::std::os::raw::c_int,
                                                             arg3:
                                                                 ::std::os::raw::c_int,
                                                             arg4:
                                                                 *mut siginfo_t,
                                                             arg5:
                                                                 *mut ::std::os::raw::c_void)>,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sigaction() {
    assert_eq!(::std::mem::size_of::<__sigaction>() , 24usize);
    assert_eq!(::std::mem::align_of::<__sigaction>() , 8usize);
}
impl Clone for __sigaction {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigaction() {
    assert_eq!(::std::mem::size_of::<sigaction>() , 16usize);
    assert_eq!(::std::mem::align_of::<sigaction>() , 8usize);
}
impl Clone for sigaction {
    fn clone(&self) -> Self { *self }
}
pub type sig_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigvec() {
    assert_eq!(::std::mem::size_of::<sigvec>() , 16usize);
    assert_eq!(::std::mem::align_of::<sigvec>() , 8usize);
}
impl Clone for sigvec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    assert_eq!(::std::mem::size_of::<sigstack>() , 16usize);
    assert_eq!(::std::mem::align_of::<sigstack>() , 8usize);
}
impl Clone for sigstack {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn signal(arg1: ::std::os::raw::c_int,
                  arg2:
                      ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     ::std::os::raw::c_int)>)
     -> ::std::option::Option<unsafe extern "C" fn()>;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(::std::mem::size_of::<timeval>() , 16usize);
    assert_eq!(::std::mem::align_of::<timeval>() , 8usize);
}
impl Clone for timeval {
    fn clone(&self) -> Self { *self }
}
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_rusage() {
    assert_eq!(::std::mem::size_of::<rusage>() , 144usize);
    assert_eq!(::std::mem::align_of::<rusage>() , 8usize);
}
impl Clone for rusage {
    fn clone(&self) -> Self { *self }
}
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v0() {
    assert_eq!(::std::mem::size_of::<rusage_info_v0>() , 96usize);
    assert_eq!(::std::mem::align_of::<rusage_info_v0>() , 8usize);
}
impl Clone for rusage_info_v0 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v1() {
    assert_eq!(::std::mem::size_of::<rusage_info_v1>() , 144usize);
    assert_eq!(::std::mem::align_of::<rusage_info_v1>() , 8usize);
}
impl Clone for rusage_info_v1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v2() {
    assert_eq!(::std::mem::size_of::<rusage_info_v2>() , 160usize);
    assert_eq!(::std::mem::align_of::<rusage_info_v2>() , 8usize);
}
impl Clone for rusage_info_v2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v3() {
    assert_eq!(::std::mem::size_of::<rusage_info_v3>() , 232usize);
    assert_eq!(::std::mem::align_of::<rusage_info_v3>() , 8usize);
}
impl Clone for rusage_info_v3 {
    fn clone(&self) -> Self { *self }
}
pub type rusage_info_current = rusage_info_v3;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[test]
fn bindgen_test_layout_rlimit() {
    assert_eq!(::std::mem::size_of::<rlimit>() , 16usize);
    assert_eq!(::std::mem::align_of::<rlimit>() , 8usize);
}
impl Clone for rlimit {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
#[test]
fn bindgen_test_layout_proc_rlimit_control_wakeupmon() {
    assert_eq!(::std::mem::size_of::<proc_rlimit_control_wakeupmon>() ,
               8usize);
    assert_eq!(::std::mem::align_of::<proc_rlimit_control_wakeupmon>() ,
               4usize);
}
impl Clone for proc_rlimit_control_wakeupmon {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getiopolicy_np(arg1: ::std::os::raw::c_int,
                          arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut rlimit)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut rusage)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpriority(arg1: ::std::os::raw::c_int, arg2: id_t,
                       arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setiopolicy_np(arg1: ::std::os::raw::c_int,
                          arg2: ::std::os::raw::c_int,
                          arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const rlimit)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub w_T: wait__bindgen_ty_1,
    pub w_S: wait__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_1: u32,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<wait__bindgen_ty_1>() , 4usize);
    assert_eq!(::std::mem::align_of::<wait__bindgen_ty_1>() , 4usize);
}
impl Clone for wait__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (127usize as u32)) >>
                                       0u32) as u32)
        }
    }
    #[inline]
    pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(127usize as u32);
        self._bitfield_1 |= ((val as u32 as u32) << 0u32) & (127usize as u32);
    }
    #[inline]
    pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (128usize as u32)) >>
                                       7u32) as u32)
        }
    }
    #[inline]
    pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(128usize as u32);
        self._bitfield_1 |= ((val as u32 as u32) << 7u32) & (128usize as u32);
    }
    #[inline]
    pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (65280usize as u32)) >>
                                       8u32) as u32)
        }
    }
    #[inline]
    pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(65280usize as u32);
        self._bitfield_1 |=
            ((val as u32 as u32) << 8u32) & (65280usize as u32);
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (4294901760usize as u32)) >> 16u32) as
                                      u32)
        }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(4294901760usize as u32);
        self._bitfield_1 |=
            ((val as u32 as u32) << 16u32) & (4294901760usize as u32);
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_1: u32,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<wait__bindgen_ty_2>() , 4usize);
    assert_eq!(::std::mem::align_of::<wait__bindgen_ty_2>() , 4usize);
}
impl Clone for wait__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (255usize as u32)) >>
                                       0u32) as u32)
        }
    }
    #[inline]
    pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(255usize as u32);
        self._bitfield_1 |= ((val as u32 as u32) << 0u32) & (255usize as u32);
    }
    #[inline]
    pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 & (65280usize as u32)) >>
                                       8u32) as u32)
        }
    }
    #[inline]
    pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(65280usize as u32);
        self._bitfield_1 |=
            ((val as u32 as u32) << 8u32) & (65280usize as u32);
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (4294901760usize as u32)) >> 16u32) as
                                      u32)
        }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(4294901760usize as u32);
        self._bitfield_1 |=
            ((val as u32 as u32) << 16u32) & (4294901760usize as u32);
    }
}
#[test]
fn bindgen_test_layout_wait() {
    assert_eq!(::std::mem::size_of::<wait>() , 4usize);
    assert_eq!(::std::mem::align_of::<wait>() , 4usize);
}
impl Clone for wait {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn waitpid(arg1: pid_t, arg2: *mut ::std::os::raw::c_int,
                   arg3: ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn waitid(arg1: idtype_t, arg2: id_t, arg3: *mut siginfo_t,
                  arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wait3(arg1: *mut ::std::os::raw::c_int,
                 arg2: ::std::os::raw::c_int, arg3: *mut rusage) -> pid_t;
}
extern "C" {
    pub fn wait4(arg1: pid_t, arg2: *mut ::std::os::raw::c_int,
                 arg3: ::std::os::raw::c_int, arg4: *mut rusage) -> pid_t;
}
extern "C" {
    pub fn alloca(arg1: usize) -> *mut ::std::os::raw::c_void;
}
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_3 {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_3>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_3>() , 4usize);
}
impl Clone for _bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
pub type div_t = _bindgen_ty_3;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_4 {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_4() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_4>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_4>() , 8usize);
}
impl Clone for _bindgen_ty_4 {
    fn clone(&self) -> Self { *self }
}
pub type ldiv_t = _bindgen_ty_4;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_5 {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout__bindgen_ty_5() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_5>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_5>() , 8usize);
}
impl Clone for _bindgen_ty_5 {
    fn clone(&self) -> Self { *self }
}
pub type lldiv_t = _bindgen_ty_5;
extern "C" {
    #[link_name = "__mb_cur_max"]
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn bsearch(__key: *const ::std::os::raw::c_void,
                   __base: *const ::std::os::raw::c_void, __nel: usize,
                   __width: usize,
                   __compar:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *const ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__count: usize, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> div_t;
}
extern "C" {
    pub fn exit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn getenv(arg1: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long)
     -> ldiv_t;
}
extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lldiv(arg1: ::std::os::raw::c_longlong,
                 arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char,
                    arg3: usize) -> usize;
}
extern "C" {
    pub fn mbtowc(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char,
                  arg3: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_memalign(__memptr: *mut *mut ::std::os::raw::c_void,
                          __alignment: usize, __size: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qsort(__base: *mut ::std::os::raw::c_void, __nel: usize,
                 __width: usize,
                 __compar:
                     ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *const ::std::os::raw::c_void,
                                                                arg2:
                                                                    *const ::std::os::raw::c_void)
                                               -> ::std::os::raw::c_int>);
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realloc(__ptr: *mut ::std::os::raw::c_void, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn strtod(arg1: *const ::std::os::raw::c_char,
                  arg2: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn strtof(arg1: *const ::std::os::raw::c_char,
                  arg2: *mut *mut ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn strtol(__str: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtold(arg1: *const ::std::os::raw::c_char,
                   arg2: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn strtoll(__str: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(__str: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(__str: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn system(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const wchar_t,
                    arg3: usize) -> usize;
}
extern "C" {
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn a64l(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn ecvt(arg1: f64, arg2: ::std::os::raw::c_int,
                arg3: *mut ::std::os::raw::c_int,
                arg4: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn fcvt(arg1: f64, arg2: ::std::os::raw::c_int,
                arg3: *mut ::std::os::raw::c_int,
                arg4: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(arg1: f64, arg2: ::std::os::raw::c_int,
                arg3: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsubopt(arg1: *mut *mut ::std::os::raw::c_char,
                     arg2: *const *const ::std::os::raw::c_char,
                     arg3: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate(arg1: ::std::os::raw::c_uint,
                     arg2: *mut ::std::os::raw::c_char, arg3: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(arg1: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "realpath$DARWIN_EXTSN"]
    pub fn realpath(arg1: *const ::std::os::raw::c_char,
                    arg2: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort)
     -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn setenv(__name: *const ::std::os::raw::c_char,
                  __value: *const ::std::os::raw::c_char,
                  __overwrite: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setstate(arg1: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
extern "C" {
    pub fn arc4random() -> u32;
}
extern "C" {
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar,
                                arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void,
                          __nbytes: usize);
}
extern "C" {
    pub fn arc4random_stir();
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
extern "C" {
    pub fn atexit_b(arg1: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsearch_b(__key: *const ::std::os::raw::c_void,
                     __base: *const ::std::os::raw::c_void, __nel: usize,
                     __width: usize, __compar: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cgetcap(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cgetclose() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetent(arg1: *mut *mut ::std::os::raw::c_char,
                   arg2: *mut *mut ::std::os::raw::c_char,
                   arg3: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetfirst(arg1: *mut *mut ::std::os::raw::c_char,
                     arg2: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetmatch(arg1: *const ::std::os::raw::c_char,
                     arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnext(arg1: *mut *mut ::std::os::raw::c_char,
                    arg2: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnum(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char,
                   arg3: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetset(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetstr(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char,
                   arg3: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetustr(arg1: *mut ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "daemon$1050"]
    pub fn daemon(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn devname_r(arg1: dev_t, arg2: mode_t,
                     buf: *mut ::std::os::raw::c_char,
                     len: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getbsize(arg1: *mut ::std::os::raw::c_int,
                    arg2: *mut ::std::os::raw::c_long)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getloadavg(arg1: *mut f64, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn heapsort(__base: *mut ::std::os::raw::c_void, __nel: usize,
                    __width: usize,
                    __compar:
                        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *const ::std::os::raw::c_void,
                                                                   arg2:
                                                                       *const ::std::os::raw::c_void)
                                                  -> ::std::os::raw::c_int>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn heapsort_b(__base: *mut ::std::os::raw::c_void, __nel: usize,
                      __width: usize, __compar: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort(__base: *mut ::std::os::raw::c_void, __nel: usize,
                     __width: usize,
                     __compar:
                         ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *const ::std::os::raw::c_void,
                                                                    arg2:
                                                                        *const ::std::os::raw::c_void)
                                                   -> ::std::os::raw::c_int>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort_b(__base: *mut ::std::os::raw::c_void, __nel: usize,
                       __width: usize, __compar: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psort(__base: *mut ::std::os::raw::c_void, __nel: usize,
                 __width: usize,
                 __compar:
                     ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *const ::std::os::raw::c_void,
                                                                arg2:
                                                                    *const ::std::os::raw::c_void)
                                               -> ::std::os::raw::c_int>);
}
extern "C" {
    pub fn psort_b(__base: *mut ::std::os::raw::c_void, __nel: usize,
                   __width: usize, __compar: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn psort_r(__base: *mut ::std::os::raw::c_void, __nel: usize,
                   __width: usize, arg1: *mut ::std::os::raw::c_void,
                   __compar:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_void,
                                                                  arg3:
                                                                      *const ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>);
}
extern "C" {
    pub fn qsort_b(__base: *mut ::std::os::raw::c_void, __nel: usize,
                   __width: usize, __compar: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn qsort_r(__base: *mut ::std::os::raw::c_void, __nel: usize,
                   __width: usize, arg1: *mut ::std::os::raw::c_void,
                   __compar:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_void,
                                                                  arg3:
                                                                      *const ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>);
}
extern "C" {
    pub fn radixsort(__base: *mut *const ::std::os::raw::c_uchar,
                     __nel: ::std::os::raw::c_int,
                     __table: *const ::std::os::raw::c_uchar,
                     __endbyte: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sradixsort(__base: *mut *const ::std::os::raw::c_uchar,
                      __nel: ::std::os::raw::c_int,
                      __table: *const ::std::os::raw::c_uchar,
                      __endbyte: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sranddev();
}
extern "C" {
    pub fn srandomdev();
}
extern "C" {
    pub fn reallocf(__ptr: *mut ::std::os::raw::c_void, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strtoq(__str: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(__str: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    #[link_name = "suboptarg"]
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn valloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
pub type __m128d = [f64; 2usize];
pub type __m128i = [::std::os::raw::c_longlong; 2usize];
pub type __v2df = [f64; 2usize];
pub type __v2di = [::std::os::raw::c_longlong; 2usize];
pub type __v8hi = [::std::os::raw::c_short; 8usize];
pub type __v16qi = [::std::os::raw::c_char; 16usize];
pub type __v2du = [::std::os::raw::c_ulonglong; 2usize];
pub type __v8hu = [::std::os::raw::c_ushort; 8usize];
pub type __v16qu = [::std::os::raw::c_uchar; 16usize];
pub type __v16qs = [::std::os::raw::c_char; 16usize];
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_6 {
    pub s: [cl_char; 2usize],
    pub __bindgen_anon_1: _bindgen_ty_6__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_6__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_6__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_6__bindgen_ty_1 {
    pub x: cl_char,
    pub y: cl_char,
}
#[test]
fn bindgen_test_layout__bindgen_ty_6__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_6__bindgen_ty_1>() , 2usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_6__bindgen_ty_1>() ,
               1usize);
}
impl Clone for _bindgen_ty_6__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_6__bindgen_ty_2 {
    pub s0: cl_char,
    pub s1: cl_char,
}
#[test]
fn bindgen_test_layout__bindgen_ty_6__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_6__bindgen_ty_2>() , 2usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_6__bindgen_ty_2>() ,
               1usize);
}
impl Clone for _bindgen_ty_6__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_6__bindgen_ty_3 {
    pub lo: cl_char,
    pub hi: cl_char,
}
#[test]
fn bindgen_test_layout__bindgen_ty_6__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_6__bindgen_ty_3>() , 2usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_6__bindgen_ty_3>() ,
               1usize);
}
impl Clone for _bindgen_ty_6__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
impl Clone for _bindgen_ty_6 {
    fn clone(&self) -> Self { *self }
}
pub type cl_char2 = _bindgen_ty_6;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_7 {
    pub s: [cl_char; 4usize],
    pub __bindgen_anon_1: _bindgen_ty_7__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_7__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_7__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_7__bindgen_ty_1 {
    pub x: cl_char,
    pub y: cl_char,
    pub z: cl_char,
    pub w: cl_char,
}
#[test]
fn bindgen_test_layout__bindgen_ty_7__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_7__bindgen_ty_1>() , 4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_7__bindgen_ty_1>() ,
               1usize);
}
impl Clone for _bindgen_ty_7__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_7__bindgen_ty_2 {
    pub s0: cl_char,
    pub s1: cl_char,
    pub s2: cl_char,
    pub s3: cl_char,
}
#[test]
fn bindgen_test_layout__bindgen_ty_7__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_7__bindgen_ty_2>() , 4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_7__bindgen_ty_2>() ,
               1usize);
}
impl Clone for _bindgen_ty_7__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_7__bindgen_ty_3 {
    pub lo: cl_char2,
    pub hi: cl_char2,
}
#[test]
fn bindgen_test_layout__bindgen_ty_7__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_7__bindgen_ty_3>() , 4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_7__bindgen_ty_3>() ,
               2usize);
}
impl Clone for _bindgen_ty_7__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
impl Clone for _bindgen_ty_7 {
    fn clone(&self) -> Self { *self }
}
pub type cl_char4 = _bindgen_ty_7;
pub type cl_char3 = cl_char4;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_8 {
    pub s: [cl_char; 8usize],
    pub __bindgen_anon_1: _bindgen_ty_8__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_8__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_8__bindgen_ty_3,
    pub v8: __cl_char8,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_8__bindgen_ty_1 {
    pub x: cl_char,
    pub y: cl_char,
    pub z: cl_char,
    pub w: cl_char,
}
#[test]
fn bindgen_test_layout__bindgen_ty_8__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_8__bindgen_ty_1>() , 4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_8__bindgen_ty_1>() ,
               1usize);
}
impl Clone for _bindgen_ty_8__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_8__bindgen_ty_2 {
    pub s0: cl_char,
    pub s1: cl_char,
    pub s2: cl_char,
    pub s3: cl_char,
    pub s4: cl_char,
    pub s5: cl_char,
    pub s6: cl_char,
    pub s7: cl_char,
}
#[test]
fn bindgen_test_layout__bindgen_ty_8__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_8__bindgen_ty_2>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_8__bindgen_ty_2>() ,
               1usize);
}
impl Clone for _bindgen_ty_8__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_8__bindgen_ty_3 {
    pub lo: cl_char4,
    pub hi: cl_char4,
}
#[test]
fn bindgen_test_layout__bindgen_ty_8__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_8__bindgen_ty_3>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_8__bindgen_ty_3>() ,
               4usize);
}
impl Clone for _bindgen_ty_8__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
impl Clone for _bindgen_ty_8 {
    fn clone(&self) -> Self { *self }
}
pub type cl_char8 = _bindgen_ty_8;
#[repr(C)]
pub union _bindgen_ty_9 {
    pub s: [cl_char; 16usize],
    pub __bindgen_anon_1: _bindgen_ty_9__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_9__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_9__bindgen_ty_3,
    pub v8: [__cl_char8; 2usize],
    pub v16: __cl_char16,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_9__bindgen_ty_1 {
    pub x: cl_char,
    pub y: cl_char,
    pub z: cl_char,
    pub w: cl_char,
    pub __spacer4: cl_char,
    pub __spacer5: cl_char,
    pub __spacer6: cl_char,
    pub __spacer7: cl_char,
    pub __spacer8: cl_char,
    pub __spacer9: cl_char,
    pub sa: cl_char,
    pub sb: cl_char,
    pub sc: cl_char,
    pub sd: cl_char,
    pub se: cl_char,
    pub sf: cl_char,
}
#[test]
fn bindgen_test_layout__bindgen_ty_9__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_9__bindgen_ty_1>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_9__bindgen_ty_1>() ,
               1usize);
}
impl Clone for _bindgen_ty_9__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_9__bindgen_ty_2 {
    pub s0: cl_char,
    pub s1: cl_char,
    pub s2: cl_char,
    pub s3: cl_char,
    pub s4: cl_char,
    pub s5: cl_char,
    pub s6: cl_char,
    pub s7: cl_char,
    pub s8: cl_char,
    pub s9: cl_char,
    pub sA: cl_char,
    pub sB: cl_char,
    pub sC: cl_char,
    pub sD: cl_char,
    pub sE: cl_char,
    pub sF: cl_char,
}
#[test]
fn bindgen_test_layout__bindgen_ty_9__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_9__bindgen_ty_2>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_9__bindgen_ty_2>() ,
               1usize);
}
impl Clone for _bindgen_ty_9__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_9__bindgen_ty_3 {
    pub lo: cl_char8,
    pub hi: cl_char8,
}
#[test]
fn bindgen_test_layout__bindgen_ty_9__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_9__bindgen_ty_3>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_9__bindgen_ty_3>() ,
               8usize);
}
impl Clone for _bindgen_ty_9__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
pub type cl_char16 = _bindgen_ty_9;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_10 {
    pub s: [cl_uchar; 2usize],
    pub __bindgen_anon_1: _bindgen_ty_10__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_10__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_10__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_10__bindgen_ty_1 {
    pub x: cl_uchar,
    pub y: cl_uchar,
}
#[test]
fn bindgen_test_layout__bindgen_ty_10__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_10__bindgen_ty_1>() ,
               2usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_10__bindgen_ty_1>() ,
               1usize);
}
impl Clone for _bindgen_ty_10__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_10__bindgen_ty_2 {
    pub s0: cl_uchar,
    pub s1: cl_uchar,
}
#[test]
fn bindgen_test_layout__bindgen_ty_10__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_10__bindgen_ty_2>() ,
               2usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_10__bindgen_ty_2>() ,
               1usize);
}
impl Clone for _bindgen_ty_10__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_10__bindgen_ty_3 {
    pub lo: cl_uchar,
    pub hi: cl_uchar,
}
#[test]
fn bindgen_test_layout__bindgen_ty_10__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_10__bindgen_ty_3>() ,
               2usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_10__bindgen_ty_3>() ,
               1usize);
}
impl Clone for _bindgen_ty_10__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
impl Clone for _bindgen_ty_10 {
    fn clone(&self) -> Self { *self }
}
pub type cl_uchar2 = _bindgen_ty_10;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_11 {
    pub s: [cl_uchar; 4usize],
    pub __bindgen_anon_1: _bindgen_ty_11__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_11__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_11__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_11__bindgen_ty_1 {
    pub x: cl_uchar,
    pub y: cl_uchar,
    pub z: cl_uchar,
    pub w: cl_uchar,
}
#[test]
fn bindgen_test_layout__bindgen_ty_11__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_11__bindgen_ty_1>() ,
               4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_11__bindgen_ty_1>() ,
               1usize);
}
impl Clone for _bindgen_ty_11__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_11__bindgen_ty_2 {
    pub s0: cl_uchar,
    pub s1: cl_uchar,
    pub s2: cl_uchar,
    pub s3: cl_uchar,
}
#[test]
fn bindgen_test_layout__bindgen_ty_11__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_11__bindgen_ty_2>() ,
               4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_11__bindgen_ty_2>() ,
               1usize);
}
impl Clone for _bindgen_ty_11__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_11__bindgen_ty_3 {
    pub lo: cl_uchar2,
    pub hi: cl_uchar2,
}
#[test]
fn bindgen_test_layout__bindgen_ty_11__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_11__bindgen_ty_3>() ,
               4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_11__bindgen_ty_3>() ,
               2usize);
}
impl Clone for _bindgen_ty_11__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
impl Clone for _bindgen_ty_11 {
    fn clone(&self) -> Self { *self }
}
pub type cl_uchar4 = _bindgen_ty_11;
pub type cl_uchar3 = cl_uchar4;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_12 {
    pub s: [cl_uchar; 8usize],
    pub __bindgen_anon_1: _bindgen_ty_12__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_12__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_12__bindgen_ty_3,
    pub v8: __cl_uchar8,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_12__bindgen_ty_1 {
    pub x: cl_uchar,
    pub y: cl_uchar,
    pub z: cl_uchar,
    pub w: cl_uchar,
}
#[test]
fn bindgen_test_layout__bindgen_ty_12__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_12__bindgen_ty_1>() ,
               4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_12__bindgen_ty_1>() ,
               1usize);
}
impl Clone for _bindgen_ty_12__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_12__bindgen_ty_2 {
    pub s0: cl_uchar,
    pub s1: cl_uchar,
    pub s2: cl_uchar,
    pub s3: cl_uchar,
    pub s4: cl_uchar,
    pub s5: cl_uchar,
    pub s6: cl_uchar,
    pub s7: cl_uchar,
}
#[test]
fn bindgen_test_layout__bindgen_ty_12__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_12__bindgen_ty_2>() ,
               8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_12__bindgen_ty_2>() ,
               1usize);
}
impl Clone for _bindgen_ty_12__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_12__bindgen_ty_3 {
    pub lo: cl_uchar4,
    pub hi: cl_uchar4,
}
#[test]
fn bindgen_test_layout__bindgen_ty_12__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_12__bindgen_ty_3>() ,
               8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_12__bindgen_ty_3>() ,
               4usize);
}
impl Clone for _bindgen_ty_12__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
impl Clone for _bindgen_ty_12 {
    fn clone(&self) -> Self { *self }
}
pub type cl_uchar8 = _bindgen_ty_12;
#[repr(C)]
pub union _bindgen_ty_13 {
    pub s: [cl_uchar; 16usize],
    pub __bindgen_anon_1: _bindgen_ty_13__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_13__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_13__bindgen_ty_3,
    pub v8: [__cl_uchar8; 2usize],
    pub v16: __cl_uchar16,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_13__bindgen_ty_1 {
    pub x: cl_uchar,
    pub y: cl_uchar,
    pub z: cl_uchar,
    pub w: cl_uchar,
    pub __spacer4: cl_uchar,
    pub __spacer5: cl_uchar,
    pub __spacer6: cl_uchar,
    pub __spacer7: cl_uchar,
    pub __spacer8: cl_uchar,
    pub __spacer9: cl_uchar,
    pub sa: cl_uchar,
    pub sb: cl_uchar,
    pub sc: cl_uchar,
    pub sd: cl_uchar,
    pub se: cl_uchar,
    pub sf: cl_uchar,
}
#[test]
fn bindgen_test_layout__bindgen_ty_13__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_13__bindgen_ty_1>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_13__bindgen_ty_1>() ,
               1usize);
}
impl Clone for _bindgen_ty_13__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_13__bindgen_ty_2 {
    pub s0: cl_uchar,
    pub s1: cl_uchar,
    pub s2: cl_uchar,
    pub s3: cl_uchar,
    pub s4: cl_uchar,
    pub s5: cl_uchar,
    pub s6: cl_uchar,
    pub s7: cl_uchar,
    pub s8: cl_uchar,
    pub s9: cl_uchar,
    pub sA: cl_uchar,
    pub sB: cl_uchar,
    pub sC: cl_uchar,
    pub sD: cl_uchar,
    pub sE: cl_uchar,
    pub sF: cl_uchar,
}
#[test]
fn bindgen_test_layout__bindgen_ty_13__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_13__bindgen_ty_2>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_13__bindgen_ty_2>() ,
               1usize);
}
impl Clone for _bindgen_ty_13__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_13__bindgen_ty_3 {
    pub lo: cl_uchar8,
    pub hi: cl_uchar8,
}
#[test]
fn bindgen_test_layout__bindgen_ty_13__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_13__bindgen_ty_3>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_13__bindgen_ty_3>() ,
               8usize);
}
impl Clone for _bindgen_ty_13__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
pub type cl_uchar16 = _bindgen_ty_13;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_14 {
    pub s: [cl_short; 2usize],
    pub __bindgen_anon_1: _bindgen_ty_14__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_14__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_14__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_14__bindgen_ty_1 {
    pub x: cl_short,
    pub y: cl_short,
}
#[test]
fn bindgen_test_layout__bindgen_ty_14__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_14__bindgen_ty_1>() ,
               4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_14__bindgen_ty_1>() ,
               2usize);
}
impl Clone for _bindgen_ty_14__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_14__bindgen_ty_2 {
    pub s0: cl_short,
    pub s1: cl_short,
}
#[test]
fn bindgen_test_layout__bindgen_ty_14__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_14__bindgen_ty_2>() ,
               4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_14__bindgen_ty_2>() ,
               2usize);
}
impl Clone for _bindgen_ty_14__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_14__bindgen_ty_3 {
    pub lo: cl_short,
    pub hi: cl_short,
}
#[test]
fn bindgen_test_layout__bindgen_ty_14__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_14__bindgen_ty_3>() ,
               4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_14__bindgen_ty_3>() ,
               2usize);
}
impl Clone for _bindgen_ty_14__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
impl Clone for _bindgen_ty_14 {
    fn clone(&self) -> Self { *self }
}
pub type cl_short2 = _bindgen_ty_14;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_15 {
    pub s: [cl_short; 4usize],
    pub __bindgen_anon_1: _bindgen_ty_15__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_15__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_15__bindgen_ty_3,
    pub v4: __cl_short4,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_15__bindgen_ty_1 {
    pub x: cl_short,
    pub y: cl_short,
    pub z: cl_short,
    pub w: cl_short,
}
#[test]
fn bindgen_test_layout__bindgen_ty_15__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_15__bindgen_ty_1>() ,
               8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_15__bindgen_ty_1>() ,
               2usize);
}
impl Clone for _bindgen_ty_15__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_15__bindgen_ty_2 {
    pub s0: cl_short,
    pub s1: cl_short,
    pub s2: cl_short,
    pub s3: cl_short,
}
#[test]
fn bindgen_test_layout__bindgen_ty_15__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_15__bindgen_ty_2>() ,
               8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_15__bindgen_ty_2>() ,
               2usize);
}
impl Clone for _bindgen_ty_15__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_15__bindgen_ty_3 {
    pub lo: cl_short2,
    pub hi: cl_short2,
}
#[test]
fn bindgen_test_layout__bindgen_ty_15__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_15__bindgen_ty_3>() ,
               8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_15__bindgen_ty_3>() ,
               4usize);
}
impl Clone for _bindgen_ty_15__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
impl Clone for _bindgen_ty_15 {
    fn clone(&self) -> Self { *self }
}
pub type cl_short4 = _bindgen_ty_15;
pub type cl_short3 = cl_short4;
#[repr(C)]
pub union _bindgen_ty_16 {
    pub s: [cl_short; 8usize],
    pub __bindgen_anon_1: _bindgen_ty_16__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_16__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_16__bindgen_ty_3,
    pub v4: [__cl_short4; 2usize],
    pub v8: __cl_short8,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_16__bindgen_ty_1 {
    pub x: cl_short,
    pub y: cl_short,
    pub z: cl_short,
    pub w: cl_short,
}
#[test]
fn bindgen_test_layout__bindgen_ty_16__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_16__bindgen_ty_1>() ,
               8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_16__bindgen_ty_1>() ,
               2usize);
}
impl Clone for _bindgen_ty_16__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_16__bindgen_ty_2 {
    pub s0: cl_short,
    pub s1: cl_short,
    pub s2: cl_short,
    pub s3: cl_short,
    pub s4: cl_short,
    pub s5: cl_short,
    pub s6: cl_short,
    pub s7: cl_short,
}
#[test]
fn bindgen_test_layout__bindgen_ty_16__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_16__bindgen_ty_2>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_16__bindgen_ty_2>() ,
               2usize);
}
impl Clone for _bindgen_ty_16__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_16__bindgen_ty_3 {
    pub lo: cl_short4,
    pub hi: cl_short4,
}
#[test]
fn bindgen_test_layout__bindgen_ty_16__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_16__bindgen_ty_3>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_16__bindgen_ty_3>() ,
               8usize);
}
impl Clone for _bindgen_ty_16__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
pub type cl_short8 = _bindgen_ty_16;
#[repr(C)]
pub union _bindgen_ty_17 {
    pub s: [cl_short; 16usize],
    pub __bindgen_anon_1: _bindgen_ty_17__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_17__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_17__bindgen_ty_3,
    pub v4: [__cl_short4; 4usize],
    pub v8: [__cl_short8; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_17__bindgen_ty_1 {
    pub x: cl_short,
    pub y: cl_short,
    pub z: cl_short,
    pub w: cl_short,
    pub __spacer4: cl_short,
    pub __spacer5: cl_short,
    pub __spacer6: cl_short,
    pub __spacer7: cl_short,
    pub __spacer8: cl_short,
    pub __spacer9: cl_short,
    pub sa: cl_short,
    pub sb: cl_short,
    pub sc: cl_short,
    pub sd: cl_short,
    pub se: cl_short,
    pub sf: cl_short,
}
#[test]
fn bindgen_test_layout__bindgen_ty_17__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_17__bindgen_ty_1>() ,
               32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_17__bindgen_ty_1>() ,
               2usize);
}
impl Clone for _bindgen_ty_17__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_17__bindgen_ty_2 {
    pub s0: cl_short,
    pub s1: cl_short,
    pub s2: cl_short,
    pub s3: cl_short,
    pub s4: cl_short,
    pub s5: cl_short,
    pub s6: cl_short,
    pub s7: cl_short,
    pub s8: cl_short,
    pub s9: cl_short,
    pub sA: cl_short,
    pub sB: cl_short,
    pub sC: cl_short,
    pub sD: cl_short,
    pub sE: cl_short,
    pub sF: cl_short,
}
#[test]
fn bindgen_test_layout__bindgen_ty_17__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_17__bindgen_ty_2>() ,
               32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_17__bindgen_ty_2>() ,
               2usize);
}
impl Clone for _bindgen_ty_17__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _bindgen_ty_17__bindgen_ty_3 {
    pub lo: cl_short8,
    pub hi: cl_short8,
}
#[test]
fn bindgen_test_layout__bindgen_ty_17__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_17__bindgen_ty_3>() ,
               32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_17__bindgen_ty_3>() ,
               16usize);
}
pub type cl_short16 = _bindgen_ty_17;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_18 {
    pub s: [cl_ushort; 2usize],
    pub __bindgen_anon_1: _bindgen_ty_18__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_18__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_18__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_18__bindgen_ty_1 {
    pub x: cl_ushort,
    pub y: cl_ushort,
}
#[test]
fn bindgen_test_layout__bindgen_ty_18__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_18__bindgen_ty_1>() ,
               4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_18__bindgen_ty_1>() ,
               2usize);
}
impl Clone for _bindgen_ty_18__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_18__bindgen_ty_2 {
    pub s0: cl_ushort,
    pub s1: cl_ushort,
}
#[test]
fn bindgen_test_layout__bindgen_ty_18__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_18__bindgen_ty_2>() ,
               4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_18__bindgen_ty_2>() ,
               2usize);
}
impl Clone for _bindgen_ty_18__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_18__bindgen_ty_3 {
    pub lo: cl_ushort,
    pub hi: cl_ushort,
}
#[test]
fn bindgen_test_layout__bindgen_ty_18__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_18__bindgen_ty_3>() ,
               4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_18__bindgen_ty_3>() ,
               2usize);
}
impl Clone for _bindgen_ty_18__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
impl Clone for _bindgen_ty_18 {
    fn clone(&self) -> Self { *self }
}
pub type cl_ushort2 = _bindgen_ty_18;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_19 {
    pub s: [cl_ushort; 4usize],
    pub __bindgen_anon_1: _bindgen_ty_19__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_19__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_19__bindgen_ty_3,
    pub v4: __cl_ushort4,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_19__bindgen_ty_1 {
    pub x: cl_ushort,
    pub y: cl_ushort,
    pub z: cl_ushort,
    pub w: cl_ushort,
}
#[test]
fn bindgen_test_layout__bindgen_ty_19__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_19__bindgen_ty_1>() ,
               8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_19__bindgen_ty_1>() ,
               2usize);
}
impl Clone for _bindgen_ty_19__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_19__bindgen_ty_2 {
    pub s0: cl_ushort,
    pub s1: cl_ushort,
    pub s2: cl_ushort,
    pub s3: cl_ushort,
}
#[test]
fn bindgen_test_layout__bindgen_ty_19__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_19__bindgen_ty_2>() ,
               8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_19__bindgen_ty_2>() ,
               2usize);
}
impl Clone for _bindgen_ty_19__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_19__bindgen_ty_3 {
    pub lo: cl_ushort2,
    pub hi: cl_ushort2,
}
#[test]
fn bindgen_test_layout__bindgen_ty_19__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_19__bindgen_ty_3>() ,
               8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_19__bindgen_ty_3>() ,
               4usize);
}
impl Clone for _bindgen_ty_19__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
impl Clone for _bindgen_ty_19 {
    fn clone(&self) -> Self { *self }
}
pub type cl_ushort4 = _bindgen_ty_19;
pub type cl_ushort3 = cl_ushort4;
#[repr(C)]
pub union _bindgen_ty_20 {
    pub s: [cl_ushort; 8usize],
    pub __bindgen_anon_1: _bindgen_ty_20__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_20__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_20__bindgen_ty_3,
    pub v4: [__cl_ushort4; 2usize],
    pub v8: __cl_ushort8,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_20__bindgen_ty_1 {
    pub x: cl_ushort,
    pub y: cl_ushort,
    pub z: cl_ushort,
    pub w: cl_ushort,
}
#[test]
fn bindgen_test_layout__bindgen_ty_20__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_20__bindgen_ty_1>() ,
               8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_20__bindgen_ty_1>() ,
               2usize);
}
impl Clone for _bindgen_ty_20__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_20__bindgen_ty_2 {
    pub s0: cl_ushort,
    pub s1: cl_ushort,
    pub s2: cl_ushort,
    pub s3: cl_ushort,
    pub s4: cl_ushort,
    pub s5: cl_ushort,
    pub s6: cl_ushort,
    pub s7: cl_ushort,
}
#[test]
fn bindgen_test_layout__bindgen_ty_20__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_20__bindgen_ty_2>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_20__bindgen_ty_2>() ,
               2usize);
}
impl Clone for _bindgen_ty_20__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_20__bindgen_ty_3 {
    pub lo: cl_ushort4,
    pub hi: cl_ushort4,
}
#[test]
fn bindgen_test_layout__bindgen_ty_20__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_20__bindgen_ty_3>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_20__bindgen_ty_3>() ,
               8usize);
}
impl Clone for _bindgen_ty_20__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
pub type cl_ushort8 = _bindgen_ty_20;
#[repr(C)]
pub union _bindgen_ty_21 {
    pub s: [cl_ushort; 16usize],
    pub __bindgen_anon_1: _bindgen_ty_21__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_21__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_21__bindgen_ty_3,
    pub v4: [__cl_ushort4; 4usize],
    pub v8: [__cl_ushort8; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_21__bindgen_ty_1 {
    pub x: cl_ushort,
    pub y: cl_ushort,
    pub z: cl_ushort,
    pub w: cl_ushort,
    pub __spacer4: cl_ushort,
    pub __spacer5: cl_ushort,
    pub __spacer6: cl_ushort,
    pub __spacer7: cl_ushort,
    pub __spacer8: cl_ushort,
    pub __spacer9: cl_ushort,
    pub sa: cl_ushort,
    pub sb: cl_ushort,
    pub sc: cl_ushort,
    pub sd: cl_ushort,
    pub se: cl_ushort,
    pub sf: cl_ushort,
}
#[test]
fn bindgen_test_layout__bindgen_ty_21__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_21__bindgen_ty_1>() ,
               32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_21__bindgen_ty_1>() ,
               2usize);
}
impl Clone for _bindgen_ty_21__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_21__bindgen_ty_2 {
    pub s0: cl_ushort,
    pub s1: cl_ushort,
    pub s2: cl_ushort,
    pub s3: cl_ushort,
    pub s4: cl_ushort,
    pub s5: cl_ushort,
    pub s6: cl_ushort,
    pub s7: cl_ushort,
    pub s8: cl_ushort,
    pub s9: cl_ushort,
    pub sA: cl_ushort,
    pub sB: cl_ushort,
    pub sC: cl_ushort,
    pub sD: cl_ushort,
    pub sE: cl_ushort,
    pub sF: cl_ushort,
}
#[test]
fn bindgen_test_layout__bindgen_ty_21__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_21__bindgen_ty_2>() ,
               32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_21__bindgen_ty_2>() ,
               2usize);
}
impl Clone for _bindgen_ty_21__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _bindgen_ty_21__bindgen_ty_3 {
    pub lo: cl_ushort8,
    pub hi: cl_ushort8,
}
#[test]
fn bindgen_test_layout__bindgen_ty_21__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_21__bindgen_ty_3>() ,
               32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_21__bindgen_ty_3>() ,
               16usize);
}
pub type cl_ushort16 = _bindgen_ty_21;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_22 {
    pub s: [cl_int; 2usize],
    pub __bindgen_anon_1: _bindgen_ty_22__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_22__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_22__bindgen_ty_3,
    pub v2: __cl_int2,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_22__bindgen_ty_1 {
    pub x: cl_int,
    pub y: cl_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_22__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_22__bindgen_ty_1>() ,
               8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_22__bindgen_ty_1>() ,
               4usize);
}
impl Clone for _bindgen_ty_22__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_22__bindgen_ty_2 {
    pub s0: cl_int,
    pub s1: cl_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_22__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_22__bindgen_ty_2>() ,
               8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_22__bindgen_ty_2>() ,
               4usize);
}
impl Clone for _bindgen_ty_22__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_22__bindgen_ty_3 {
    pub lo: cl_int,
    pub hi: cl_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_22__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_22__bindgen_ty_3>() ,
               8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_22__bindgen_ty_3>() ,
               4usize);
}
impl Clone for _bindgen_ty_22__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
impl Clone for _bindgen_ty_22 {
    fn clone(&self) -> Self { *self }
}
pub type cl_int2 = _bindgen_ty_22;
#[repr(C)]
pub union _bindgen_ty_23 {
    pub s: [cl_int; 4usize],
    pub __bindgen_anon_1: _bindgen_ty_23__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_23__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_23__bindgen_ty_3,
    pub v2: [__cl_int2; 2usize],
    pub v4: __cl_int4,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_23__bindgen_ty_1 {
    pub x: cl_int,
    pub y: cl_int,
    pub z: cl_int,
    pub w: cl_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_23__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_23__bindgen_ty_1>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_23__bindgen_ty_1>() ,
               4usize);
}
impl Clone for _bindgen_ty_23__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_23__bindgen_ty_2 {
    pub s0: cl_int,
    pub s1: cl_int,
    pub s2: cl_int,
    pub s3: cl_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_23__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_23__bindgen_ty_2>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_23__bindgen_ty_2>() ,
               4usize);
}
impl Clone for _bindgen_ty_23__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_23__bindgen_ty_3 {
    pub lo: cl_int2,
    pub hi: cl_int2,
}
#[test]
fn bindgen_test_layout__bindgen_ty_23__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_23__bindgen_ty_3>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_23__bindgen_ty_3>() ,
               8usize);
}
impl Clone for _bindgen_ty_23__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
pub type cl_int4 = _bindgen_ty_23;
pub type cl_int3 = cl_int4;
#[repr(C)]
pub union _bindgen_ty_24 {
    pub s: [cl_int; 8usize],
    pub __bindgen_anon_1: _bindgen_ty_24__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_24__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_24__bindgen_ty_3,
    pub v2: [__cl_int2; 4usize],
    pub v4: [__cl_int4; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_24__bindgen_ty_1 {
    pub x: cl_int,
    pub y: cl_int,
    pub z: cl_int,
    pub w: cl_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_24__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_24__bindgen_ty_1>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_24__bindgen_ty_1>() ,
               4usize);
}
impl Clone for _bindgen_ty_24__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_24__bindgen_ty_2 {
    pub s0: cl_int,
    pub s1: cl_int,
    pub s2: cl_int,
    pub s3: cl_int,
    pub s4: cl_int,
    pub s5: cl_int,
    pub s6: cl_int,
    pub s7: cl_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_24__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_24__bindgen_ty_2>() ,
               32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_24__bindgen_ty_2>() ,
               4usize);
}
impl Clone for _bindgen_ty_24__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _bindgen_ty_24__bindgen_ty_3 {
    pub lo: cl_int4,
    pub hi: cl_int4,
}
#[test]
fn bindgen_test_layout__bindgen_ty_24__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_24__bindgen_ty_3>() ,
               32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_24__bindgen_ty_3>() ,
               16usize);
}
pub type cl_int8 = _bindgen_ty_24;
#[repr(C)]
pub union _bindgen_ty_25 {
    pub s: [cl_int; 16usize],
    pub __bindgen_anon_1: _bindgen_ty_25__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_25__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_25__bindgen_ty_3,
    pub v2: [__cl_int2; 8usize],
    pub v4: [__cl_int4; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_25__bindgen_ty_1 {
    pub x: cl_int,
    pub y: cl_int,
    pub z: cl_int,
    pub w: cl_int,
    pub __spacer4: cl_int,
    pub __spacer5: cl_int,
    pub __spacer6: cl_int,
    pub __spacer7: cl_int,
    pub __spacer8: cl_int,
    pub __spacer9: cl_int,
    pub sa: cl_int,
    pub sb: cl_int,
    pub sc: cl_int,
    pub sd: cl_int,
    pub se: cl_int,
    pub sf: cl_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_25__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_25__bindgen_ty_1>() ,
               64usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_25__bindgen_ty_1>() ,
               4usize);
}
impl Clone for _bindgen_ty_25__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_25__bindgen_ty_2 {
    pub s0: cl_int,
    pub s1: cl_int,
    pub s2: cl_int,
    pub s3: cl_int,
    pub s4: cl_int,
    pub s5: cl_int,
    pub s6: cl_int,
    pub s7: cl_int,
    pub s8: cl_int,
    pub s9: cl_int,
    pub sA: cl_int,
    pub sB: cl_int,
    pub sC: cl_int,
    pub sD: cl_int,
    pub sE: cl_int,
    pub sF: cl_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_25__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_25__bindgen_ty_2>() ,
               64usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_25__bindgen_ty_2>() ,
               4usize);
}
impl Clone for _bindgen_ty_25__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _bindgen_ty_25__bindgen_ty_3 {
    pub lo: cl_int8,
    pub hi: cl_int8,
}
#[test]
fn bindgen_test_layout__bindgen_ty_25__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_25__bindgen_ty_3>() ,
               64usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_25__bindgen_ty_3>() ,
               32usize);
}
pub type cl_int16 = _bindgen_ty_25;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_26 {
    pub s: [cl_uint; 2usize],
    pub __bindgen_anon_1: _bindgen_ty_26__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_26__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_26__bindgen_ty_3,
    pub v2: __cl_uint2,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_26__bindgen_ty_1 {
    pub x: cl_uint,
    pub y: cl_uint,
}
#[test]
fn bindgen_test_layout__bindgen_ty_26__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_26__bindgen_ty_1>() ,
               8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_26__bindgen_ty_1>() ,
               4usize);
}
impl Clone for _bindgen_ty_26__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_26__bindgen_ty_2 {
    pub s0: cl_uint,
    pub s1: cl_uint,
}
#[test]
fn bindgen_test_layout__bindgen_ty_26__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_26__bindgen_ty_2>() ,
               8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_26__bindgen_ty_2>() ,
               4usize);
}
impl Clone for _bindgen_ty_26__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_26__bindgen_ty_3 {
    pub lo: cl_uint,
    pub hi: cl_uint,
}
#[test]
fn bindgen_test_layout__bindgen_ty_26__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_26__bindgen_ty_3>() ,
               8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_26__bindgen_ty_3>() ,
               4usize);
}
impl Clone for _bindgen_ty_26__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
impl Clone for _bindgen_ty_26 {
    fn clone(&self) -> Self { *self }
}
pub type cl_uint2 = _bindgen_ty_26;
#[repr(C)]
pub union _bindgen_ty_27 {
    pub s: [cl_uint; 4usize],
    pub __bindgen_anon_1: _bindgen_ty_27__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_27__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_27__bindgen_ty_3,
    pub v2: [__cl_uint2; 2usize],
    pub v4: __cl_uint4,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_27__bindgen_ty_1 {
    pub x: cl_uint,
    pub y: cl_uint,
    pub z: cl_uint,
    pub w: cl_uint,
}
#[test]
fn bindgen_test_layout__bindgen_ty_27__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_27__bindgen_ty_1>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_27__bindgen_ty_1>() ,
               4usize);
}
impl Clone for _bindgen_ty_27__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_27__bindgen_ty_2 {
    pub s0: cl_uint,
    pub s1: cl_uint,
    pub s2: cl_uint,
    pub s3: cl_uint,
}
#[test]
fn bindgen_test_layout__bindgen_ty_27__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_27__bindgen_ty_2>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_27__bindgen_ty_2>() ,
               4usize);
}
impl Clone for _bindgen_ty_27__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_27__bindgen_ty_3 {
    pub lo: cl_uint2,
    pub hi: cl_uint2,
}
#[test]
fn bindgen_test_layout__bindgen_ty_27__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_27__bindgen_ty_3>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_27__bindgen_ty_3>() ,
               8usize);
}
impl Clone for _bindgen_ty_27__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
pub type cl_uint4 = _bindgen_ty_27;
pub type cl_uint3 = cl_uint4;
#[repr(C)]
pub union _bindgen_ty_28 {
    pub s: [cl_uint; 8usize],
    pub __bindgen_anon_1: _bindgen_ty_28__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_28__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_28__bindgen_ty_3,
    pub v2: [__cl_uint2; 4usize],
    pub v4: [__cl_uint4; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_28__bindgen_ty_1 {
    pub x: cl_uint,
    pub y: cl_uint,
    pub z: cl_uint,
    pub w: cl_uint,
}
#[test]
fn bindgen_test_layout__bindgen_ty_28__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_28__bindgen_ty_1>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_28__bindgen_ty_1>() ,
               4usize);
}
impl Clone for _bindgen_ty_28__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_28__bindgen_ty_2 {
    pub s0: cl_uint,
    pub s1: cl_uint,
    pub s2: cl_uint,
    pub s3: cl_uint,
    pub s4: cl_uint,
    pub s5: cl_uint,
    pub s6: cl_uint,
    pub s7: cl_uint,
}
#[test]
fn bindgen_test_layout__bindgen_ty_28__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_28__bindgen_ty_2>() ,
               32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_28__bindgen_ty_2>() ,
               4usize);
}
impl Clone for _bindgen_ty_28__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _bindgen_ty_28__bindgen_ty_3 {
    pub lo: cl_uint4,
    pub hi: cl_uint4,
}
#[test]
fn bindgen_test_layout__bindgen_ty_28__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_28__bindgen_ty_3>() ,
               32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_28__bindgen_ty_3>() ,
               16usize);
}
pub type cl_uint8 = _bindgen_ty_28;
#[repr(C)]
pub union _bindgen_ty_29 {
    pub s: [cl_uint; 16usize],
    pub __bindgen_anon_1: _bindgen_ty_29__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_29__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_29__bindgen_ty_3,
    pub v2: [__cl_uint2; 8usize],
    pub v4: [__cl_uint4; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_29__bindgen_ty_1 {
    pub x: cl_uint,
    pub y: cl_uint,
    pub z: cl_uint,
    pub w: cl_uint,
    pub __spacer4: cl_uint,
    pub __spacer5: cl_uint,
    pub __spacer6: cl_uint,
    pub __spacer7: cl_uint,
    pub __spacer8: cl_uint,
    pub __spacer9: cl_uint,
    pub sa: cl_uint,
    pub sb: cl_uint,
    pub sc: cl_uint,
    pub sd: cl_uint,
    pub se: cl_uint,
    pub sf: cl_uint,
}
#[test]
fn bindgen_test_layout__bindgen_ty_29__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_29__bindgen_ty_1>() ,
               64usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_29__bindgen_ty_1>() ,
               4usize);
}
impl Clone for _bindgen_ty_29__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_29__bindgen_ty_2 {
    pub s0: cl_uint,
    pub s1: cl_uint,
    pub s2: cl_uint,
    pub s3: cl_uint,
    pub s4: cl_uint,
    pub s5: cl_uint,
    pub s6: cl_uint,
    pub s7: cl_uint,
    pub s8: cl_uint,
    pub s9: cl_uint,
    pub sA: cl_uint,
    pub sB: cl_uint,
    pub sC: cl_uint,
    pub sD: cl_uint,
    pub sE: cl_uint,
    pub sF: cl_uint,
}
#[test]
fn bindgen_test_layout__bindgen_ty_29__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_29__bindgen_ty_2>() ,
               64usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_29__bindgen_ty_2>() ,
               4usize);
}
impl Clone for _bindgen_ty_29__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _bindgen_ty_29__bindgen_ty_3 {
    pub lo: cl_uint8,
    pub hi: cl_uint8,
}
#[test]
fn bindgen_test_layout__bindgen_ty_29__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_29__bindgen_ty_3>() ,
               64usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_29__bindgen_ty_3>() ,
               32usize);
}
pub type cl_uint16 = _bindgen_ty_29;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_30 {
    pub s: [cl_long; 2usize],
    pub __bindgen_anon_1: _bindgen_ty_30__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_30__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_30__bindgen_ty_3,
    pub v2: __cl_long2,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_30__bindgen_ty_1 {
    pub x: cl_long,
    pub y: cl_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_30__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_30__bindgen_ty_1>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_30__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _bindgen_ty_30__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_30__bindgen_ty_2 {
    pub s0: cl_long,
    pub s1: cl_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_30__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_30__bindgen_ty_2>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_30__bindgen_ty_2>() ,
               8usize);
}
impl Clone for _bindgen_ty_30__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_30__bindgen_ty_3 {
    pub lo: cl_long,
    pub hi: cl_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_30__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_30__bindgen_ty_3>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_30__bindgen_ty_3>() ,
               8usize);
}
impl Clone for _bindgen_ty_30__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
impl Clone for _bindgen_ty_30 {
    fn clone(&self) -> Self { *self }
}
pub type cl_long2 = _bindgen_ty_30;
#[repr(C)]
pub union _bindgen_ty_31 {
    pub s: [cl_long; 4usize],
    pub __bindgen_anon_1: _bindgen_ty_31__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_31__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_31__bindgen_ty_3,
    pub v2: [__cl_long2; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_31__bindgen_ty_1 {
    pub x: cl_long,
    pub y: cl_long,
    pub z: cl_long,
    pub w: cl_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_31__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_31__bindgen_ty_1>() ,
               32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_31__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _bindgen_ty_31__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_31__bindgen_ty_2 {
    pub s0: cl_long,
    pub s1: cl_long,
    pub s2: cl_long,
    pub s3: cl_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_31__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_31__bindgen_ty_2>() ,
               32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_31__bindgen_ty_2>() ,
               8usize);
}
impl Clone for _bindgen_ty_31__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_31__bindgen_ty_3 {
    pub lo: cl_long2,
    pub hi: cl_long2,
}
#[test]
fn bindgen_test_layout__bindgen_ty_31__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_31__bindgen_ty_3>() ,
               32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_31__bindgen_ty_3>() ,
               16usize);
}
impl Clone for _bindgen_ty_31__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
pub type cl_long4 = _bindgen_ty_31;
pub type cl_long3 = cl_long4;
#[repr(C)]
pub union _bindgen_ty_32 {
    pub s: [cl_long; 8usize],
    pub __bindgen_anon_1: _bindgen_ty_32__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_32__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_32__bindgen_ty_3,
    pub v2: [__cl_long2; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_32__bindgen_ty_1 {
    pub x: cl_long,
    pub y: cl_long,
    pub z: cl_long,
    pub w: cl_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_32__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_32__bindgen_ty_1>() ,
               32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_32__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _bindgen_ty_32__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_32__bindgen_ty_2 {
    pub s0: cl_long,
    pub s1: cl_long,
    pub s2: cl_long,
    pub s3: cl_long,
    pub s4: cl_long,
    pub s5: cl_long,
    pub s6: cl_long,
    pub s7: cl_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_32__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_32__bindgen_ty_2>() ,
               64usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_32__bindgen_ty_2>() ,
               8usize);
}
impl Clone for _bindgen_ty_32__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _bindgen_ty_32__bindgen_ty_3 {
    pub lo: cl_long4,
    pub hi: cl_long4,
}
#[test]
fn bindgen_test_layout__bindgen_ty_32__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_32__bindgen_ty_3>() ,
               64usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_32__bindgen_ty_3>() ,
               32usize);
}
pub type cl_long8 = _bindgen_ty_32;
#[repr(C)]
pub union _bindgen_ty_33 {
    pub s: [cl_long; 16usize],
    pub __bindgen_anon_1: _bindgen_ty_33__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_33__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_33__bindgen_ty_3,
    pub v2: [__cl_long2; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_33__bindgen_ty_1 {
    pub x: cl_long,
    pub y: cl_long,
    pub z: cl_long,
    pub w: cl_long,
    pub __spacer4: cl_long,
    pub __spacer5: cl_long,
    pub __spacer6: cl_long,
    pub __spacer7: cl_long,
    pub __spacer8: cl_long,
    pub __spacer9: cl_long,
    pub sa: cl_long,
    pub sb: cl_long,
    pub sc: cl_long,
    pub sd: cl_long,
    pub se: cl_long,
    pub sf: cl_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_33__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_33__bindgen_ty_1>() ,
               128usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_33__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _bindgen_ty_33__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_33__bindgen_ty_2 {
    pub s0: cl_long,
    pub s1: cl_long,
    pub s2: cl_long,
    pub s3: cl_long,
    pub s4: cl_long,
    pub s5: cl_long,
    pub s6: cl_long,
    pub s7: cl_long,
    pub s8: cl_long,
    pub s9: cl_long,
    pub sA: cl_long,
    pub sB: cl_long,
    pub sC: cl_long,
    pub sD: cl_long,
    pub sE: cl_long,
    pub sF: cl_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_33__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_33__bindgen_ty_2>() ,
               128usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_33__bindgen_ty_2>() ,
               8usize);
}
impl Clone for _bindgen_ty_33__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _bindgen_ty_33__bindgen_ty_3 {
    pub lo: cl_long8,
    pub hi: cl_long8,
}
#[test]
fn bindgen_test_layout__bindgen_ty_33__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_33__bindgen_ty_3>() ,
               128usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_33__bindgen_ty_3>() ,
               64usize);
}
pub type cl_long16 = _bindgen_ty_33;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_34 {
    pub s: [cl_ulong; 2usize],
    pub __bindgen_anon_1: _bindgen_ty_34__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_34__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_34__bindgen_ty_3,
    pub v2: __cl_ulong2,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_34__bindgen_ty_1 {
    pub x: cl_ulong,
    pub y: cl_ulong,
}
#[test]
fn bindgen_test_layout__bindgen_ty_34__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_34__bindgen_ty_1>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_34__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _bindgen_ty_34__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_34__bindgen_ty_2 {
    pub s0: cl_ulong,
    pub s1: cl_ulong,
}
#[test]
fn bindgen_test_layout__bindgen_ty_34__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_34__bindgen_ty_2>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_34__bindgen_ty_2>() ,
               8usize);
}
impl Clone for _bindgen_ty_34__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_34__bindgen_ty_3 {
    pub lo: cl_ulong,
    pub hi: cl_ulong,
}
#[test]
fn bindgen_test_layout__bindgen_ty_34__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_34__bindgen_ty_3>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_34__bindgen_ty_3>() ,
               8usize);
}
impl Clone for _bindgen_ty_34__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
impl Clone for _bindgen_ty_34 {
    fn clone(&self) -> Self { *self }
}
pub type cl_ulong2 = _bindgen_ty_34;
#[repr(C)]
pub union _bindgen_ty_35 {
    pub s: [cl_ulong; 4usize],
    pub __bindgen_anon_1: _bindgen_ty_35__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_35__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_35__bindgen_ty_3,
    pub v2: [__cl_ulong2; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_35__bindgen_ty_1 {
    pub x: cl_ulong,
    pub y: cl_ulong,
    pub z: cl_ulong,
    pub w: cl_ulong,
}
#[test]
fn bindgen_test_layout__bindgen_ty_35__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_35__bindgen_ty_1>() ,
               32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_35__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _bindgen_ty_35__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_35__bindgen_ty_2 {
    pub s0: cl_ulong,
    pub s1: cl_ulong,
    pub s2: cl_ulong,
    pub s3: cl_ulong,
}
#[test]
fn bindgen_test_layout__bindgen_ty_35__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_35__bindgen_ty_2>() ,
               32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_35__bindgen_ty_2>() ,
               8usize);
}
impl Clone for _bindgen_ty_35__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_35__bindgen_ty_3 {
    pub lo: cl_ulong2,
    pub hi: cl_ulong2,
}
#[test]
fn bindgen_test_layout__bindgen_ty_35__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_35__bindgen_ty_3>() ,
               32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_35__bindgen_ty_3>() ,
               16usize);
}
impl Clone for _bindgen_ty_35__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
pub type cl_ulong4 = _bindgen_ty_35;
pub type cl_ulong3 = cl_ulong4;
#[repr(C)]
pub union _bindgen_ty_36 {
    pub s: [cl_ulong; 8usize],
    pub __bindgen_anon_1: _bindgen_ty_36__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_36__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_36__bindgen_ty_3,
    pub v2: [__cl_ulong2; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_36__bindgen_ty_1 {
    pub x: cl_ulong,
    pub y: cl_ulong,
    pub z: cl_ulong,
    pub w: cl_ulong,
}
#[test]
fn bindgen_test_layout__bindgen_ty_36__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_36__bindgen_ty_1>() ,
               32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_36__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _bindgen_ty_36__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_36__bindgen_ty_2 {
    pub s0: cl_ulong,
    pub s1: cl_ulong,
    pub s2: cl_ulong,
    pub s3: cl_ulong,
    pub s4: cl_ulong,
    pub s5: cl_ulong,
    pub s6: cl_ulong,
    pub s7: cl_ulong,
}
#[test]
fn bindgen_test_layout__bindgen_ty_36__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_36__bindgen_ty_2>() ,
               64usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_36__bindgen_ty_2>() ,
               8usize);
}
impl Clone for _bindgen_ty_36__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _bindgen_ty_36__bindgen_ty_3 {
    pub lo: cl_ulong4,
    pub hi: cl_ulong4,
}
#[test]
fn bindgen_test_layout__bindgen_ty_36__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_36__bindgen_ty_3>() ,
               64usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_36__bindgen_ty_3>() ,
               32usize);
}
pub type cl_ulong8 = _bindgen_ty_36;
#[repr(C)]
pub union _bindgen_ty_37 {
    pub s: [cl_ulong; 16usize],
    pub __bindgen_anon_1: _bindgen_ty_37__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_37__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_37__bindgen_ty_3,
    pub v2: [__cl_ulong2; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_37__bindgen_ty_1 {
    pub x: cl_ulong,
    pub y: cl_ulong,
    pub z: cl_ulong,
    pub w: cl_ulong,
    pub __spacer4: cl_ulong,
    pub __spacer5: cl_ulong,
    pub __spacer6: cl_ulong,
    pub __spacer7: cl_ulong,
    pub __spacer8: cl_ulong,
    pub __spacer9: cl_ulong,
    pub sa: cl_ulong,
    pub sb: cl_ulong,
    pub sc: cl_ulong,
    pub sd: cl_ulong,
    pub se: cl_ulong,
    pub sf: cl_ulong,
}
#[test]
fn bindgen_test_layout__bindgen_ty_37__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_37__bindgen_ty_1>() ,
               128usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_37__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _bindgen_ty_37__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_37__bindgen_ty_2 {
    pub s0: cl_ulong,
    pub s1: cl_ulong,
    pub s2: cl_ulong,
    pub s3: cl_ulong,
    pub s4: cl_ulong,
    pub s5: cl_ulong,
    pub s6: cl_ulong,
    pub s7: cl_ulong,
    pub s8: cl_ulong,
    pub s9: cl_ulong,
    pub sA: cl_ulong,
    pub sB: cl_ulong,
    pub sC: cl_ulong,
    pub sD: cl_ulong,
    pub sE: cl_ulong,
    pub sF: cl_ulong,
}
#[test]
fn bindgen_test_layout__bindgen_ty_37__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_37__bindgen_ty_2>() ,
               128usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_37__bindgen_ty_2>() ,
               8usize);
}
impl Clone for _bindgen_ty_37__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _bindgen_ty_37__bindgen_ty_3 {
    pub lo: cl_ulong8,
    pub hi: cl_ulong8,
}
#[test]
fn bindgen_test_layout__bindgen_ty_37__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_37__bindgen_ty_3>() ,
               128usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_37__bindgen_ty_3>() ,
               64usize);
}
pub type cl_ulong16 = _bindgen_ty_37;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_38 {
    pub s: [cl_float; 2usize],
    pub __bindgen_anon_1: _bindgen_ty_38__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_38__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_38__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_38__bindgen_ty_1 {
    pub x: cl_float,
    pub y: cl_float,
}
#[test]
fn bindgen_test_layout__bindgen_ty_38__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_38__bindgen_ty_1>() ,
               8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_38__bindgen_ty_1>() ,
               4usize);
}
impl Clone for _bindgen_ty_38__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_38__bindgen_ty_2 {
    pub s0: cl_float,
    pub s1: cl_float,
}
#[test]
fn bindgen_test_layout__bindgen_ty_38__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_38__bindgen_ty_2>() ,
               8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_38__bindgen_ty_2>() ,
               4usize);
}
impl Clone for _bindgen_ty_38__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_38__bindgen_ty_3 {
    pub lo: cl_float,
    pub hi: cl_float,
}
#[test]
fn bindgen_test_layout__bindgen_ty_38__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_38__bindgen_ty_3>() ,
               8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_38__bindgen_ty_3>() ,
               4usize);
}
impl Clone for _bindgen_ty_38__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
impl Clone for _bindgen_ty_38 {
    fn clone(&self) -> Self { *self }
}
pub type cl_float2 = _bindgen_ty_38;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_39 {
    pub s: [cl_float; 4usize],
    pub __bindgen_anon_1: _bindgen_ty_39__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_39__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_39__bindgen_ty_3,
    pub v4: __cl_float4,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_39__bindgen_ty_1 {
    pub x: cl_float,
    pub y: cl_float,
    pub z: cl_float,
    pub w: cl_float,
}
#[test]
fn bindgen_test_layout__bindgen_ty_39__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_39__bindgen_ty_1>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_39__bindgen_ty_1>() ,
               4usize);
}
impl Clone for _bindgen_ty_39__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_39__bindgen_ty_2 {
    pub s0: cl_float,
    pub s1: cl_float,
    pub s2: cl_float,
    pub s3: cl_float,
}
#[test]
fn bindgen_test_layout__bindgen_ty_39__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_39__bindgen_ty_2>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_39__bindgen_ty_2>() ,
               4usize);
}
impl Clone for _bindgen_ty_39__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_39__bindgen_ty_3 {
    pub lo: cl_float2,
    pub hi: cl_float2,
}
#[test]
fn bindgen_test_layout__bindgen_ty_39__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_39__bindgen_ty_3>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_39__bindgen_ty_3>() ,
               8usize);
}
impl Clone for _bindgen_ty_39__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
impl Clone for _bindgen_ty_39 {
    fn clone(&self) -> Self { *self }
}
pub type cl_float4 = _bindgen_ty_39;
pub type cl_float3 = cl_float4;
#[repr(C)]
pub union _bindgen_ty_40 {
    pub s: [cl_float; 8usize],
    pub __bindgen_anon_1: _bindgen_ty_40__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_40__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_40__bindgen_ty_3,
    pub v4: [__cl_float4; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_40__bindgen_ty_1 {
    pub x: cl_float,
    pub y: cl_float,
    pub z: cl_float,
    pub w: cl_float,
}
#[test]
fn bindgen_test_layout__bindgen_ty_40__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_40__bindgen_ty_1>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_40__bindgen_ty_1>() ,
               4usize);
}
impl Clone for _bindgen_ty_40__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_40__bindgen_ty_2 {
    pub s0: cl_float,
    pub s1: cl_float,
    pub s2: cl_float,
    pub s3: cl_float,
    pub s4: cl_float,
    pub s5: cl_float,
    pub s6: cl_float,
    pub s7: cl_float,
}
#[test]
fn bindgen_test_layout__bindgen_ty_40__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_40__bindgen_ty_2>() ,
               32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_40__bindgen_ty_2>() ,
               4usize);
}
impl Clone for _bindgen_ty_40__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_40__bindgen_ty_3 {
    pub lo: cl_float4,
    pub hi: cl_float4,
}
#[test]
fn bindgen_test_layout__bindgen_ty_40__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_40__bindgen_ty_3>() ,
               32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_40__bindgen_ty_3>() ,
               16usize);
}
impl Clone for _bindgen_ty_40__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
pub type cl_float8 = _bindgen_ty_40;
#[repr(C)]
pub union _bindgen_ty_41 {
    pub s: [cl_float; 16usize],
    pub __bindgen_anon_1: _bindgen_ty_41__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_41__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_41__bindgen_ty_3,
    pub v4: [__cl_float4; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_41__bindgen_ty_1 {
    pub x: cl_float,
    pub y: cl_float,
    pub z: cl_float,
    pub w: cl_float,
    pub __spacer4: cl_float,
    pub __spacer5: cl_float,
    pub __spacer6: cl_float,
    pub __spacer7: cl_float,
    pub __spacer8: cl_float,
    pub __spacer9: cl_float,
    pub sa: cl_float,
    pub sb: cl_float,
    pub sc: cl_float,
    pub sd: cl_float,
    pub se: cl_float,
    pub sf: cl_float,
}
#[test]
fn bindgen_test_layout__bindgen_ty_41__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_41__bindgen_ty_1>() ,
               64usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_41__bindgen_ty_1>() ,
               4usize);
}
impl Clone for _bindgen_ty_41__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_41__bindgen_ty_2 {
    pub s0: cl_float,
    pub s1: cl_float,
    pub s2: cl_float,
    pub s3: cl_float,
    pub s4: cl_float,
    pub s5: cl_float,
    pub s6: cl_float,
    pub s7: cl_float,
    pub s8: cl_float,
    pub s9: cl_float,
    pub sA: cl_float,
    pub sB: cl_float,
    pub sC: cl_float,
    pub sD: cl_float,
    pub sE: cl_float,
    pub sF: cl_float,
}
#[test]
fn bindgen_test_layout__bindgen_ty_41__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_41__bindgen_ty_2>() ,
               64usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_41__bindgen_ty_2>() ,
               4usize);
}
impl Clone for _bindgen_ty_41__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _bindgen_ty_41__bindgen_ty_3 {
    pub lo: cl_float8,
    pub hi: cl_float8,
}
#[test]
fn bindgen_test_layout__bindgen_ty_41__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_41__bindgen_ty_3>() ,
               64usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_41__bindgen_ty_3>() ,
               32usize);
}
pub type cl_float16 = _bindgen_ty_41;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_42 {
    pub s: [cl_double; 2usize],
    pub __bindgen_anon_1: _bindgen_ty_42__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_42__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_42__bindgen_ty_3,
    pub v2: __cl_double2,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_42__bindgen_ty_1 {
    pub x: cl_double,
    pub y: cl_double,
}
#[test]
fn bindgen_test_layout__bindgen_ty_42__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_42__bindgen_ty_1>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_42__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _bindgen_ty_42__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_42__bindgen_ty_2 {
    pub s0: cl_double,
    pub s1: cl_double,
}
#[test]
fn bindgen_test_layout__bindgen_ty_42__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_42__bindgen_ty_2>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_42__bindgen_ty_2>() ,
               8usize);
}
impl Clone for _bindgen_ty_42__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_42__bindgen_ty_3 {
    pub lo: cl_double,
    pub hi: cl_double,
}
#[test]
fn bindgen_test_layout__bindgen_ty_42__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_42__bindgen_ty_3>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_42__bindgen_ty_3>() ,
               8usize);
}
impl Clone for _bindgen_ty_42__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
impl Clone for _bindgen_ty_42 {
    fn clone(&self) -> Self { *self }
}
pub type cl_double2 = _bindgen_ty_42;
#[repr(C)]
pub union _bindgen_ty_43 {
    pub s: [cl_double; 4usize],
    pub __bindgen_anon_1: _bindgen_ty_43__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_43__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_43__bindgen_ty_3,
    pub v2: [__cl_double2; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_43__bindgen_ty_1 {
    pub x: cl_double,
    pub y: cl_double,
    pub z: cl_double,
    pub w: cl_double,
}
#[test]
fn bindgen_test_layout__bindgen_ty_43__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_43__bindgen_ty_1>() ,
               32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_43__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _bindgen_ty_43__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_43__bindgen_ty_2 {
    pub s0: cl_double,
    pub s1: cl_double,
    pub s2: cl_double,
    pub s3: cl_double,
}
#[test]
fn bindgen_test_layout__bindgen_ty_43__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_43__bindgen_ty_2>() ,
               32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_43__bindgen_ty_2>() ,
               8usize);
}
impl Clone for _bindgen_ty_43__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_43__bindgen_ty_3 {
    pub lo: cl_double2,
    pub hi: cl_double2,
}
#[test]
fn bindgen_test_layout__bindgen_ty_43__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_43__bindgen_ty_3>() ,
               32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_43__bindgen_ty_3>() ,
               16usize);
}
impl Clone for _bindgen_ty_43__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
pub type cl_double4 = _bindgen_ty_43;
pub type cl_double3 = cl_double4;
#[repr(C)]
pub union _bindgen_ty_44 {
    pub s: [cl_double; 8usize],
    pub __bindgen_anon_1: _bindgen_ty_44__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_44__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_44__bindgen_ty_3,
    pub v2: [__cl_double2; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_44__bindgen_ty_1 {
    pub x: cl_double,
    pub y: cl_double,
    pub z: cl_double,
    pub w: cl_double,
}
#[test]
fn bindgen_test_layout__bindgen_ty_44__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_44__bindgen_ty_1>() ,
               32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_44__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _bindgen_ty_44__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_44__bindgen_ty_2 {
    pub s0: cl_double,
    pub s1: cl_double,
    pub s2: cl_double,
    pub s3: cl_double,
    pub s4: cl_double,
    pub s5: cl_double,
    pub s6: cl_double,
    pub s7: cl_double,
}
#[test]
fn bindgen_test_layout__bindgen_ty_44__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_44__bindgen_ty_2>() ,
               64usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_44__bindgen_ty_2>() ,
               8usize);
}
impl Clone for _bindgen_ty_44__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _bindgen_ty_44__bindgen_ty_3 {
    pub lo: cl_double4,
    pub hi: cl_double4,
}
#[test]
fn bindgen_test_layout__bindgen_ty_44__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_44__bindgen_ty_3>() ,
               64usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_44__bindgen_ty_3>() ,
               32usize);
}
pub type cl_double8 = _bindgen_ty_44;
#[repr(C)]
pub union _bindgen_ty_45 {
    pub s: [cl_double; 16usize],
    pub __bindgen_anon_1: _bindgen_ty_45__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_45__bindgen_ty_2,
    pub __bindgen_anon_3: _bindgen_ty_45__bindgen_ty_3,
    pub v2: [__cl_double2; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_45__bindgen_ty_1 {
    pub x: cl_double,
    pub y: cl_double,
    pub z: cl_double,
    pub w: cl_double,
    pub __spacer4: cl_double,
    pub __spacer5: cl_double,
    pub __spacer6: cl_double,
    pub __spacer7: cl_double,
    pub __spacer8: cl_double,
    pub __spacer9: cl_double,
    pub sa: cl_double,
    pub sb: cl_double,
    pub sc: cl_double,
    pub sd: cl_double,
    pub se: cl_double,
    pub sf: cl_double,
}
#[test]
fn bindgen_test_layout__bindgen_ty_45__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_45__bindgen_ty_1>() ,
               128usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_45__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _bindgen_ty_45__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_45__bindgen_ty_2 {
    pub s0: cl_double,
    pub s1: cl_double,
    pub s2: cl_double,
    pub s3: cl_double,
    pub s4: cl_double,
    pub s5: cl_double,
    pub s6: cl_double,
    pub s7: cl_double,
    pub s8: cl_double,
    pub s9: cl_double,
    pub sA: cl_double,
    pub sB: cl_double,
    pub sC: cl_double,
    pub sD: cl_double,
    pub sE: cl_double,
    pub sF: cl_double,
}
#[test]
fn bindgen_test_layout__bindgen_ty_45__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_45__bindgen_ty_2>() ,
               128usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_45__bindgen_ty_2>() ,
               8usize);
}
impl Clone for _bindgen_ty_45__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _bindgen_ty_45__bindgen_ty_3 {
    pub lo: cl_double8,
    pub hi: cl_double8,
}
#[test]
fn bindgen_test_layout__bindgen_ty_45__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_45__bindgen_ty_3>() ,
               128usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_45__bindgen_ty_3>() ,
               64usize);
}
pub type cl_double16 = _bindgen_ty_45;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_platform_id([u8; 0]);
pub type cl_platform_id = *mut _cl_platform_id;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_device_id([u8; 0]);
pub type cl_device_id = *mut _cl_device_id;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_context([u8; 0]);
pub type cl_context = *mut _cl_context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_command_queue([u8; 0]);
pub type cl_command_queue = *mut _cl_command_queue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_mem([u8; 0]);
pub type cl_mem = *mut _cl_mem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_program([u8; 0]);
pub type cl_program = *mut _cl_program;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_kernel([u8; 0]);
pub type cl_kernel = *mut _cl_kernel;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_event([u8; 0]);
pub type cl_event = *mut _cl_event;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_sampler([u8; 0]);
pub type cl_sampler = *mut _cl_sampler;
pub type cl_bool = cl_uint;
pub type cl_bitfield = cl_ulong;
pub type cl_device_type = cl_bitfield;
pub type cl_platform_info = cl_uint;
pub type cl_device_info = cl_uint;
pub type cl_device_fp_config = cl_bitfield;
pub type cl_device_mem_cache_type = cl_uint;
pub type cl_device_local_mem_type = cl_uint;
pub type cl_device_exec_capabilities = cl_bitfield;
pub type cl_command_queue_properties = cl_bitfield;
pub type cl_device_partition_property = isize;
pub type cl_device_affinity_domain = cl_bitfield;
pub type cl_context_properties = isize;
pub type cl_context_info = cl_uint;
pub type cl_command_queue_info = cl_uint;
pub type cl_channel_order = cl_uint;
pub type cl_channel_type = cl_uint;
pub type cl_mem_flags = cl_bitfield;
pub type cl_mem_object_type = cl_uint;
pub type cl_mem_info = cl_uint;
pub type cl_mem_migration_flags = cl_bitfield;
pub type cl_image_info = cl_uint;
pub type cl_buffer_create_type = cl_uint;
pub type cl_addressing_mode = cl_uint;
pub type cl_filter_mode = cl_uint;
pub type cl_sampler_info = cl_uint;
pub type cl_map_flags = cl_bitfield;
pub type cl_program_info = cl_uint;
pub type cl_program_build_info = cl_uint;
pub type cl_program_binary_type = cl_uint;
pub type cl_build_status = cl_int;
pub type cl_kernel_info = cl_uint;
pub type cl_kernel_arg_info = cl_uint;
pub type cl_kernel_arg_address_qualifier = cl_uint;
pub type cl_kernel_arg_access_qualifier = cl_uint;
pub type cl_kernel_arg_type_qualifier = cl_bitfield;
pub type cl_kernel_work_group_info = cl_uint;
pub type cl_event_info = cl_uint;
pub type cl_command_type = cl_uint;
pub type cl_profiling_info = cl_uint;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cl_image_format {
    pub image_channel_order: cl_channel_order,
    pub image_channel_data_type: cl_channel_type,
}
#[test]
fn bindgen_test_layout__cl_image_format() {
    assert_eq!(::std::mem::size_of::<_cl_image_format>() , 8usize);
    assert_eq!(::std::mem::align_of::<_cl_image_format>() , 4usize);
}
impl Clone for _cl_image_format {
    fn clone(&self) -> Self { *self }
}
pub type cl_image_format = _cl_image_format;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cl_image_desc {
    pub image_type: cl_mem_object_type,
    pub image_width: usize,
    pub image_height: usize,
    pub image_depth: usize,
    pub image_array_size: usize,
    pub image_row_pitch: usize,
    pub image_slice_pitch: usize,
    pub num_mip_levels: cl_uint,
    pub num_samples: cl_uint,
    pub buffer: cl_mem,
}
#[test]
fn bindgen_test_layout__cl_image_desc() {
    assert_eq!(::std::mem::size_of::<_cl_image_desc>() , 72usize);
    assert_eq!(::std::mem::align_of::<_cl_image_desc>() , 8usize);
}
impl Clone for _cl_image_desc {
    fn clone(&self) -> Self { *self }
}
pub type cl_image_desc = _cl_image_desc;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cl_buffer_region {
    pub origin: usize,
    pub size: usize,
}
#[test]
fn bindgen_test_layout__cl_buffer_region() {
    assert_eq!(::std::mem::size_of::<_cl_buffer_region>() , 16usize);
    assert_eq!(::std::mem::align_of::<_cl_buffer_region>() , 8usize);
}
impl Clone for _cl_buffer_region {
    fn clone(&self) -> Self { *self }
}
pub type cl_buffer_region = _cl_buffer_region;
extern "C" {
    pub fn clGetPlatformIDs(arg1: cl_uint, arg2: *mut cl_platform_id,
                            arg3: *mut cl_uint) -> cl_int;
}
extern "C" {
    pub fn clGetPlatformInfo(arg1: cl_platform_id, arg2: cl_platform_info,
                             arg3: usize, arg4: *mut ::std::os::raw::c_void,
                             arg5: *mut usize) -> cl_int;
}
extern "C" {
    pub fn clGetDeviceIDs(arg1: cl_platform_id, arg2: cl_device_type,
                          arg3: cl_uint, arg4: *mut cl_device_id,
                          arg5: *mut cl_uint) -> cl_int;
}
extern "C" {
    pub fn clGetDeviceInfo(arg1: cl_device_id, arg2: cl_device_info,
                           arg3: usize, arg4: *mut ::std::os::raw::c_void,
                           arg5: *mut usize) -> cl_int;
}
extern "C" {
    pub fn clCreateSubDevices(arg1: cl_device_id,
                              arg2: *const cl_device_partition_property,
                              arg3: cl_uint, arg4: *mut cl_device_id,
                              arg5: *mut cl_uint) -> cl_int;
}
extern "C" {
    pub fn clRetainDevice(arg1: cl_device_id) -> cl_int;
}
extern "C" {
    pub fn clReleaseDevice(arg1: cl_device_id) -> cl_int;
}
extern "C" {
    pub fn clCreateContext(arg1: *const cl_context_properties, arg2: cl_uint,
                           arg3: *const cl_device_id,
                           arg4:
                               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *const ::std::os::raw::c_char,
                                                                          arg2:
                                                                              *const ::std::os::raw::c_void,
                                                                          arg3:
                                                                              usize,
                                                                          arg4:
                                                                              *mut ::std::os::raw::c_void)>,
                           arg5: *mut ::std::os::raw::c_void,
                           arg6: *mut cl_int) -> cl_context;
}
extern "C" {
    pub fn clCreateContextFromType(arg1: *const cl_context_properties,
                                   arg2: cl_device_type,
                                   arg3:
                                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                      *const ::std::os::raw::c_char,
                                                                                  arg2:
                                                                                      *const ::std::os::raw::c_void,
                                                                                  arg3:
                                                                                      usize,
                                                                                  arg4:
                                                                                      *mut ::std::os::raw::c_void)>,
                                   arg4: *mut ::std::os::raw::c_void,
                                   arg5: *mut cl_int) -> cl_context;
}
extern "C" {
    pub fn clRetainContext(arg1: cl_context) -> cl_int;
}
extern "C" {
    pub fn clReleaseContext(arg1: cl_context) -> cl_int;
}
extern "C" {
    pub fn clGetContextInfo(arg1: cl_context, arg2: cl_context_info,
                            arg3: usize, arg4: *mut ::std::os::raw::c_void,
                            arg5: *mut usize) -> cl_int;
}
extern "C" {
    pub fn clCreateCommandQueue(arg1: cl_context, arg2: cl_device_id,
                                arg3: cl_command_queue_properties,
                                arg4: *mut cl_int) -> cl_command_queue;
}
extern "C" {
    pub fn clRetainCommandQueue(arg1: cl_command_queue) -> cl_int;
}
extern "C" {
    pub fn clReleaseCommandQueue(arg1: cl_command_queue) -> cl_int;
}
extern "C" {
    pub fn clGetCommandQueueInfo(arg1: cl_command_queue,
                                 arg2: cl_command_queue_info, arg3: usize,
                                 arg4: *mut ::std::os::raw::c_void,
                                 arg5: *mut usize) -> cl_int;
}
extern "C" {
    pub fn clCreateBuffer(arg1: cl_context, arg2: cl_mem_flags, arg3: usize,
                          arg4: *mut ::std::os::raw::c_void,
                          arg5: *mut cl_int) -> cl_mem;
}
extern "C" {
    pub fn clCreateSubBuffer(arg1: cl_mem, arg2: cl_mem_flags,
                             arg3: cl_buffer_create_type,
                             arg4: *const ::std::os::raw::c_void,
                             arg5: *mut cl_int) -> cl_mem;
}
extern "C" {
    pub fn clCreateImage(arg1: cl_context, arg2: cl_mem_flags,
                         arg3: *const cl_image_format,
                         arg4: *const cl_image_desc,
                         arg5: *mut ::std::os::raw::c_void, arg6: *mut cl_int)
     -> cl_mem;
}
extern "C" {
    pub fn clRetainMemObject(arg1: cl_mem) -> cl_int;
}
extern "C" {
    pub fn clReleaseMemObject(arg1: cl_mem) -> cl_int;
}
extern "C" {
    pub fn clGetSupportedImageFormats(arg1: cl_context, arg2: cl_mem_flags,
                                      arg3: cl_mem_object_type, arg4: cl_uint,
                                      arg5: *mut cl_image_format,
                                      arg6: *mut cl_uint) -> cl_int;
}
extern "C" {
    pub fn clGetMemObjectInfo(arg1: cl_mem, arg2: cl_mem_info, arg3: usize,
                              arg4: *mut ::std::os::raw::c_void,
                              arg5: *mut usize) -> cl_int;
}
extern "C" {
    pub fn clGetImageInfo(arg1: cl_mem, arg2: cl_image_info, arg3: usize,
                          arg4: *mut ::std::os::raw::c_void, arg5: *mut usize)
     -> cl_int;
}
extern "C" {
    pub fn clSetMemObjectDestructorCallback(arg1: cl_mem,
                                            arg2:
                                                ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                               cl_mem,
                                                                                           arg2:
                                                                                               *mut ::std::os::raw::c_void)>,
                                            arg3: *mut ::std::os::raw::c_void)
     -> cl_int;
}
extern "C" {
    pub fn clCreateSampler(arg1: cl_context, arg2: cl_bool,
                           arg3: cl_addressing_mode, arg4: cl_filter_mode,
                           arg5: *mut cl_int) -> cl_sampler;
}
extern "C" {
    pub fn clRetainSampler(arg1: cl_sampler) -> cl_int;
}
extern "C" {
    pub fn clReleaseSampler(arg1: cl_sampler) -> cl_int;
}
extern "C" {
    pub fn clGetSamplerInfo(arg1: cl_sampler, arg2: cl_sampler_info,
                            arg3: usize, arg4: *mut ::std::os::raw::c_void,
                            arg5: *mut usize) -> cl_int;
}
extern "C" {
    pub fn clCreateProgramWithSource(arg1: cl_context, arg2: cl_uint,
                                     arg3: *mut *const ::std::os::raw::c_char,
                                     arg4: *const usize, arg5: *mut cl_int)
     -> cl_program;
}
extern "C" {
    pub fn clCreateProgramWithBinary(arg1: cl_context, arg2: cl_uint,
                                     arg3: *const cl_device_id,
                                     arg4: *const usize,
                                     arg5:
                                         *mut *const ::std::os::raw::c_uchar,
                                     arg6: *mut cl_int, arg7: *mut cl_int)
     -> cl_program;
}
extern "C" {
    pub fn clCreateProgramWithBuiltInKernels(arg1: cl_context, arg2: cl_uint,
                                             arg3: *const cl_device_id,
                                             arg4:
                                                 *const ::std::os::raw::c_char,
                                             arg5: *mut cl_int) -> cl_program;
}
extern "C" {
    pub fn clRetainProgram(arg1: cl_program) -> cl_int;
}
extern "C" {
    pub fn clReleaseProgram(arg1: cl_program) -> cl_int;
}
extern "C" {
    pub fn clBuildProgram(arg1: cl_program, arg2: cl_uint,
                          arg3: *const cl_device_id,
                          arg4: *const ::std::os::raw::c_char,
                          arg5:
                              ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             cl_program,
                                                                         arg2:
                                                                             *mut ::std::os::raw::c_void)>,
                          arg6: *mut ::std::os::raw::c_void) -> cl_int;
}
extern "C" {
    pub fn clCompileProgram(arg1: cl_program, arg2: cl_uint,
                            arg3: *const cl_device_id,
                            arg4: *const ::std::os::raw::c_char,
                            arg5: cl_uint, arg6: *const cl_program,
                            arg7: *mut *const ::std::os::raw::c_char,
                            arg8:
                                ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               cl_program,
                                                                           arg2:
                                                                               *mut ::std::os::raw::c_void)>,
                            arg9: *mut ::std::os::raw::c_void) -> cl_int;
}
extern "C" {
    pub fn clLinkProgram(arg1: cl_context, arg2: cl_uint,
                         arg3: *const cl_device_id,
                         arg4: *const ::std::os::raw::c_char, arg5: cl_uint,
                         arg6: *const cl_program,
                         arg7:
                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            cl_program,
                                                                        arg2:
                                                                            *mut ::std::os::raw::c_void)>,
                         arg8: *mut ::std::os::raw::c_void, arg9: *mut cl_int)
     -> cl_program;
}
extern "C" {
    pub fn clUnloadPlatformCompiler(arg1: cl_platform_id) -> cl_int;
}
extern "C" {
    pub fn clGetProgramInfo(arg1: cl_program, arg2: cl_program_info,
                            arg3: usize, arg4: *mut ::std::os::raw::c_void,
                            arg5: *mut usize) -> cl_int;
}
extern "C" {
    pub fn clGetProgramBuildInfo(arg1: cl_program, arg2: cl_device_id,
                                 arg3: cl_program_build_info, arg4: usize,
                                 arg5: *mut ::std::os::raw::c_void,
                                 arg6: *mut usize) -> cl_int;
}
extern "C" {
    pub fn clCreateKernel(arg1: cl_program,
                          arg2: *const ::std::os::raw::c_char,
                          arg3: *mut cl_int) -> cl_kernel;
}
extern "C" {
    pub fn clCreateKernelsInProgram(arg1: cl_program, arg2: cl_uint,
                                    arg3: *mut cl_kernel, arg4: *mut cl_uint)
     -> cl_int;
}
extern "C" {
    pub fn clRetainKernel(arg1: cl_kernel) -> cl_int;
}
extern "C" {
    pub fn clReleaseKernel(arg1: cl_kernel) -> cl_int;
}
extern "C" {
    pub fn clSetKernelArg(arg1: cl_kernel, arg2: cl_uint, arg3: usize,
                          arg4: *const ::std::os::raw::c_void) -> cl_int;
}
extern "C" {
    pub fn clGetKernelInfo(arg1: cl_kernel, arg2: cl_kernel_info, arg3: usize,
                           arg4: *mut ::std::os::raw::c_void,
                           arg5: *mut usize) -> cl_int;
}
extern "C" {
    pub fn clGetKernelArgInfo(arg1: cl_kernel, arg2: cl_uint,
                              arg3: cl_kernel_arg_info, arg4: usize,
                              arg5: *mut ::std::os::raw::c_void,
                              arg6: *mut usize) -> cl_int;
}
extern "C" {
    pub fn clGetKernelWorkGroupInfo(arg1: cl_kernel, arg2: cl_device_id,
                                    arg3: cl_kernel_work_group_info,
                                    arg4: usize,
                                    arg5: *mut ::std::os::raw::c_void,
                                    arg6: *mut usize) -> cl_int;
}
extern "C" {
    pub fn clWaitForEvents(arg1: cl_uint, arg2: *const cl_event) -> cl_int;
}
extern "C" {
    pub fn clGetEventInfo(arg1: cl_event, arg2: cl_event_info, arg3: usize,
                          arg4: *mut ::std::os::raw::c_void, arg5: *mut usize)
     -> cl_int;
}
extern "C" {
    pub fn clCreateUserEvent(arg1: cl_context, arg2: *mut cl_int) -> cl_event;
}
extern "C" {
    pub fn clRetainEvent(arg1: cl_event) -> cl_int;
}
extern "C" {
    pub fn clReleaseEvent(arg1: cl_event) -> cl_int;
}
extern "C" {
    pub fn clSetUserEventStatus(arg1: cl_event, arg2: cl_int) -> cl_int;
}
extern "C" {
    pub fn clSetEventCallback(arg1: cl_event, arg2: cl_int,
                              arg3:
                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 cl_event,
                                                                             arg2:
                                                                                 cl_int,
                                                                             arg3:
                                                                                 *mut ::std::os::raw::c_void)>,
                              arg4: *mut ::std::os::raw::c_void) -> cl_int;
}
extern "C" {
    pub fn clGetEventProfilingInfo(arg1: cl_event, arg2: cl_profiling_info,
                                   arg3: usize,
                                   arg4: *mut ::std::os::raw::c_void,
                                   arg5: *mut usize) -> cl_int;
}
extern "C" {
    pub fn clFlush(arg1: cl_command_queue) -> cl_int;
}
extern "C" {
    pub fn clFinish(arg1: cl_command_queue) -> cl_int;
}
extern "C" {
    pub fn clEnqueueReadBuffer(arg1: cl_command_queue, arg2: cl_mem,
                               arg3: cl_bool, arg4: usize, arg5: usize,
                               arg6: *mut ::std::os::raw::c_void,
                               arg7: cl_uint, arg8: *const cl_event,
                               arg9: *mut cl_event) -> cl_int;
}
extern "C" {
    pub fn clEnqueueReadBufferRect(arg1: cl_command_queue, arg2: cl_mem,
                                   arg3: cl_bool, arg4: *const usize,
                                   arg5: *const usize, arg6: *const usize,
                                   arg7: usize, arg8: usize, arg9: usize,
                                   arg10: usize,
                                   arg11: *mut ::std::os::raw::c_void,
                                   arg12: cl_uint, arg13: *const cl_event,
                                   arg14: *mut cl_event) -> cl_int;
}
extern "C" {
    pub fn clEnqueueWriteBuffer(arg1: cl_command_queue, arg2: cl_mem,
                                arg3: cl_bool, arg4: usize, arg5: usize,
                                arg6: *const ::std::os::raw::c_void,
                                arg7: cl_uint, arg8: *const cl_event,
                                arg9: *mut cl_event) -> cl_int;
}
extern "C" {
    pub fn clEnqueueWriteBufferRect(arg1: cl_command_queue, arg2: cl_mem,
                                    arg3: cl_bool, arg4: *const usize,
                                    arg5: *const usize, arg6: *const usize,
                                    arg7: usize, arg8: usize, arg9: usize,
                                    arg10: usize,
                                    arg11: *const ::std::os::raw::c_void,
                                    arg12: cl_uint, arg13: *const cl_event,
                                    arg14: *mut cl_event) -> cl_int;
}
extern "C" {
    pub fn clEnqueueFillBuffer(arg1: cl_command_queue, arg2: cl_mem,
                               arg3: *const ::std::os::raw::c_void,
                               arg4: usize, arg5: usize, arg6: usize,
                               arg7: cl_uint, arg8: *const cl_event,
                               arg9: *mut cl_event) -> cl_int;
}
extern "C" {
    pub fn clEnqueueCopyBuffer(arg1: cl_command_queue, arg2: cl_mem,
                               arg3: cl_mem, arg4: usize, arg5: usize,
                               arg6: usize, arg7: cl_uint,
                               arg8: *const cl_event, arg9: *mut cl_event)
     -> cl_int;
}
extern "C" {
    pub fn clEnqueueCopyBufferRect(arg1: cl_command_queue, arg2: cl_mem,
                                   arg3: cl_mem, arg4: *const usize,
                                   arg5: *const usize, arg6: *const usize,
                                   arg7: usize, arg8: usize, arg9: usize,
                                   arg10: usize, arg11: cl_uint,
                                   arg12: *const cl_event,
                                   arg13: *mut cl_event) -> cl_int;
}
extern "C" {
    pub fn clEnqueueReadImage(arg1: cl_command_queue, arg2: cl_mem,
                              arg3: cl_bool, arg4: *const usize,
                              arg5: *const usize, arg6: usize, arg7: usize,
                              arg8: *mut ::std::os::raw::c_void,
                              arg9: cl_uint, arg10: *const cl_event,
                              arg11: *mut cl_event) -> cl_int;
}
extern "C" {
    pub fn clEnqueueWriteImage(arg1: cl_command_queue, arg2: cl_mem,
                               arg3: cl_bool, arg4: *const usize,
                               arg5: *const usize, arg6: usize, arg7: usize,
                               arg8: *const ::std::os::raw::c_void,
                               arg9: cl_uint, arg10: *const cl_event,
                               arg11: *mut cl_event) -> cl_int;
}
extern "C" {
    pub fn clEnqueueFillImage(arg1: cl_command_queue, arg2: cl_mem,
                              arg3: *const ::std::os::raw::c_void,
                              arg4: *const usize, arg5: *const usize,
                              arg6: cl_uint, arg7: *const cl_event,
                              arg8: *mut cl_event) -> cl_int;
}
extern "C" {
    pub fn clEnqueueCopyImage(arg1: cl_command_queue, arg2: cl_mem,
                              arg3: cl_mem, arg4: *const usize,
                              arg5: *const usize, arg6: *const usize,
                              arg7: cl_uint, arg8: *const cl_event,
                              arg9: *mut cl_event) -> cl_int;
}
extern "C" {
    pub fn clEnqueueCopyImageToBuffer(arg1: cl_command_queue, arg2: cl_mem,
                                      arg3: cl_mem, arg4: *const usize,
                                      arg5: *const usize, arg6: usize,
                                      arg7: cl_uint, arg8: *const cl_event,
                                      arg9: *mut cl_event) -> cl_int;
}
extern "C" {
    pub fn clEnqueueCopyBufferToImage(arg1: cl_command_queue, arg2: cl_mem,
                                      arg3: cl_mem, arg4: usize,
                                      arg5: *const usize, arg6: *const usize,
                                      arg7: cl_uint, arg8: *const cl_event,
                                      arg9: *mut cl_event) -> cl_int;
}
extern "C" {
    pub fn clEnqueueMapBuffer(arg1: cl_command_queue, arg2: cl_mem,
                              arg3: cl_bool, arg4: cl_map_flags, arg5: usize,
                              arg6: usize, arg7: cl_uint,
                              arg8: *const cl_event, arg9: *mut cl_event,
                              arg10: *mut cl_int)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn clEnqueueMapImage(arg1: cl_command_queue, arg2: cl_mem,
                             arg3: cl_bool, arg4: cl_map_flags,
                             arg5: *const usize, arg6: *const usize,
                             arg7: *mut usize, arg8: *mut usize,
                             arg9: cl_uint, arg10: *const cl_event,
                             arg11: *mut cl_event, arg12: *mut cl_int)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn clEnqueueUnmapMemObject(arg1: cl_command_queue, arg2: cl_mem,
                                   arg3: *mut ::std::os::raw::c_void,
                                   arg4: cl_uint, arg5: *const cl_event,
                                   arg6: *mut cl_event) -> cl_int;
}
extern "C" {
    pub fn clEnqueueMigrateMemObjects(arg1: cl_command_queue, arg2: cl_uint,
                                      arg3: *const cl_mem,
                                      arg4: cl_mem_migration_flags,
                                      arg5: cl_uint, arg6: *const cl_event,
                                      arg7: *mut cl_event) -> cl_int;
}
extern "C" {
    pub fn clEnqueueNDRangeKernel(arg1: cl_command_queue, arg2: cl_kernel,
                                  arg3: cl_uint, arg4: *const usize,
                                  arg5: *const usize, arg6: *const usize,
                                  arg7: cl_uint, arg8: *const cl_event,
                                  arg9: *mut cl_event) -> cl_int;
}
extern "C" {
    pub fn clEnqueueTask(arg1: cl_command_queue, arg2: cl_kernel,
                         arg3: cl_uint, arg4: *const cl_event,
                         arg5: *mut cl_event) -> cl_int;
}
extern "C" {
    pub fn clEnqueueNativeKernel(arg1: cl_command_queue,
                                 arg2:
                                     ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut ::std::os::raw::c_void)>,
                                 arg3: *mut ::std::os::raw::c_void,
                                 arg4: usize, arg5: cl_uint,
                                 arg6: *const cl_mem,
                                 arg7: *mut *const ::std::os::raw::c_void,
                                 arg8: cl_uint, arg9: *const cl_event,
                                 arg10: *mut cl_event) -> cl_int;
}
extern "C" {
    pub fn clEnqueueMarkerWithWaitList(arg1: cl_command_queue, arg2: cl_uint,
                                       arg3: *const cl_event,
                                       arg4: *mut cl_event) -> cl_int;
}
extern "C" {
    pub fn clEnqueueBarrierWithWaitList(arg1: cl_command_queue, arg2: cl_uint,
                                        arg3: *const cl_event,
                                        arg4: *mut cl_event) -> cl_int;
}
extern "C" {
    pub fn clGetExtensionFunctionAddressForPlatform(arg1: cl_platform_id,
                                                    arg2:
                                                        *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn clCreateImage2D(arg1: cl_context, arg2: cl_mem_flags,
                           arg3: *const cl_image_format, arg4: usize,
                           arg5: usize, arg6: usize,
                           arg7: *mut ::std::os::raw::c_void,
                           arg8: *mut cl_int) -> cl_mem;
}
extern "C" {
    pub fn clCreateImage3D(arg1: cl_context, arg2: cl_mem_flags,
                           arg3: *const cl_image_format, arg4: usize,
                           arg5: usize, arg6: usize, arg7: usize, arg8: usize,
                           arg9: *mut ::std::os::raw::c_void,
                           arg10: *mut cl_int) -> cl_mem;
}
extern "C" {
    pub fn clEnqueueMarker(arg1: cl_command_queue, arg2: *mut cl_event)
     -> cl_int;
}
extern "C" {
    pub fn clEnqueueWaitForEvents(arg1: cl_command_queue, arg2: cl_uint,
                                  arg3: *const cl_event) -> cl_int;
}
extern "C" {
    pub fn clEnqueueBarrier(arg1: cl_command_queue) -> cl_int;
}
extern "C" {
    pub fn clUnloadCompiler() -> cl_int;
}
extern "C" {
    pub fn clGetExtensionFunctionAddress(arg1: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_void;
}
pub type cl_gl_object_type = cl_uint;
pub type cl_gl_texture_info = cl_uint;
pub type cl_gl_platform_info = cl_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __GLsync([u8; 0]);
pub type cl_GLsync = *mut __GLsync;
extern "C" {
    pub fn clCreateFromGLBuffer(arg1: cl_context, arg2: cl_mem_flags,
                                arg3: cl_GLuint,
                                arg4: *mut ::std::os::raw::c_int) -> cl_mem;
}
extern "C" {
    pub fn clCreateFromGLTexture(arg1: cl_context, arg2: cl_mem_flags,
                                 arg3: cl_GLenum, arg4: cl_GLint,
                                 arg5: cl_GLuint, arg6: *mut cl_int)
     -> cl_mem;
}
extern "C" {
    pub fn clCreateFromGLRenderbuffer(arg1: cl_context, arg2: cl_mem_flags,
                                      arg3: cl_GLuint, arg4: *mut cl_int)
     -> cl_mem;
}
extern "C" {
    pub fn clGetGLObjectInfo(arg1: cl_mem, arg2: *mut cl_gl_object_type,
                             arg3: *mut cl_GLuint) -> cl_int;
}
extern "C" {
    pub fn clGetGLTextureInfo(arg1: cl_mem, arg2: cl_gl_texture_info,
                              arg3: usize, arg4: *mut ::std::os::raw::c_void,
                              arg5: *mut usize) -> cl_int;
}
extern "C" {
    pub fn clEnqueueAcquireGLObjects(arg1: cl_command_queue, arg2: cl_uint,
                                     arg3: *const cl_mem, arg4: cl_uint,
                                     arg5: *const cl_event,
                                     arg6: *mut cl_event) -> cl_int;
}
extern "C" {
    pub fn clEnqueueReleaseGLObjects(arg1: cl_command_queue, arg2: cl_uint,
                                     arg3: *const cl_mem, arg4: cl_uint,
                                     arg5: *const cl_event,
                                     arg6: *mut cl_event) -> cl_int;
}
extern "C" {
    pub fn clCreateFromGLTexture2D(arg1: cl_context, arg2: cl_mem_flags,
                                   arg3: cl_GLenum, arg4: cl_GLint,
                                   arg5: cl_GLuint, arg6: *mut cl_int)
     -> cl_mem;
}
extern "C" {
    pub fn clCreateFromGLTexture3D(arg1: cl_context, arg2: cl_mem_flags,
                                   arg3: cl_GLenum, arg4: cl_GLint,
                                   arg5: cl_GLuint, arg6: *mut cl_int)
     -> cl_mem;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CGLContextObject([u8; 0]);
pub type CGLContextObj = *mut _CGLContextObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CGLPixelFormatObject([u8; 0]);
pub type CGLPixelFormatObj = *mut _CGLPixelFormatObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CGLRendererInfoObject([u8; 0]);
pub type CGLRendererInfoObj = *mut _CGLRendererInfoObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CGLPBufferObject([u8; 0]);
pub type CGLPBufferObj = *mut _CGLPBufferObject;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _CGLPixelFormatAttribute {
    kCGLPFAAllRenderers = 1,
    kCGLPFATripleBuffer = 3,
    kCGLPFADoubleBuffer = 5,
    kCGLPFAColorSize = 8,
    kCGLPFAAlphaSize = 11,
    kCGLPFADepthSize = 12,
    kCGLPFAStencilSize = 13,
    kCGLPFAMinimumPolicy = 51,
    kCGLPFAMaximumPolicy = 52,
    kCGLPFASampleBuffers = 55,
    kCGLPFASamples = 56,
    kCGLPFAColorFloat = 58,
    kCGLPFAMultisample = 59,
    kCGLPFASupersample = 60,
    kCGLPFASampleAlpha = 61,
    kCGLPFARendererID = 70,
    kCGLPFANoRecovery = 72,
    kCGLPFAAccelerated = 73,
    kCGLPFAClosestPolicy = 74,
    kCGLPFABackingStore = 76,
    kCGLPFABackingVolatile = 77,
    kCGLPFADisplayMask = 84,
    kCGLPFAAllowOfflineRenderers = 96,
    kCGLPFAAcceleratedCompute = 97,
    kCGLPFAOpenGLProfile = 99,
    kCGLPFASupportsAutomaticGraphicsSwitching = 101,
    kCGLPFAVirtualScreenCount = 128,
    kCGLPFAAuxBuffers = 7,
    kCGLPFAAccumSize = 14,
    kCGLPFAAuxDepthStencil = 57,
    kCGLPFAStereo = 6,
    kCGLPFAOffScreen = 53,
    kCGLPFAWindow = 80,
    kCGLPFACompliant = 83,
    kCGLPFAPBuffer = 90,
    kCGLPFARemotePBuffer = 91,
    kCGLPFASingleRenderer = 71,
    kCGLPFARobust = 75,
    kCGLPFAMPSafe = 78,
    kCGLPFAMultiScreen = 81,
    kCGLPFAFullScreen = 54,
}
pub use self::_CGLPixelFormatAttribute as CGLPixelFormatAttribute;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _CGLRendererProperty {
    kCGLRPOffScreen = 53,
    kCGLRPRendererID = 70,
    kCGLRPAccelerated = 73,
    kCGLRPBackingStore = 76,
    kCGLRPWindow = 80,
    kCGLRPCompliant = 83,
    kCGLRPDisplayMask = 84,
    kCGLRPBufferModes = 100,
    kCGLRPColorModes = 103,
    kCGLRPAccumModes = 104,
    kCGLRPDepthModes = 105,
    kCGLRPStencilModes = 106,
    kCGLRPMaxAuxBuffers = 107,
    kCGLRPMaxSampleBuffers = 108,
    kCGLRPMaxSamples = 109,
    kCGLRPSampleModes = 110,
    kCGLRPSampleAlpha = 111,
    kCGLRPGPUVertProcCapable = 122,
    kCGLRPGPUFragProcCapable = 123,
    kCGLRPRendererCount = 128,
    kCGLRPOnline = 129,
    kCGLRPAcceleratedCompute = 130,
    kCGLRPVideoMemoryMegabytes = 131,
    kCGLRPTextureMemoryMegabytes = 132,
    kCGLRPMajorGLVersion = 133,
    kCGLRPRobust = 75,
    kCGLRPMPSafe = 78,
    kCGLRPMultiScreen = 81,
    kCGLRPFullScreen = 54,
    kCGLRPVideoMemory = 120,
    kCGLRPTextureMemory = 121,
}
pub use self::_CGLRendererProperty as CGLRendererProperty;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _CGLContextEnable {
    kCGLCESwapRectangle = 201,
    kCGLCESwapLimit = 203,
    kCGLCERasterization = 221,
    kCGLCEStateValidation = 301,
    kCGLCESurfaceBackingSize = 305,
    kCGLCEDisplayListOptimization = 307,
    kCGLCEMPEngine = 313,
    kCGLCECrashOnRemovedFunctions = 316,
}
pub use self::_CGLContextEnable as CGLContextEnable;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _CGLGPURestartStatus {
    kCGLCPGPURestartStatusNone = 0,
    kCGLCPGPURestartStatusCaused = 1,
    kCGLCPGPURestartStatusBlacklisted = 2,
}
pub use self::_CGLGPURestartStatus as CGLGPURestartStatus;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _CGLContextParameter {
    kCGLCPSwapRectangle = 200,
    kCGLCPSwapInterval = 222,
    kCGLCPDispatchTableSize = 224,
    kCGLCPClientStorage = 226,
    kCGLCPSurfaceTexture = 228,
    kCGLCPSurfaceOrder = 235,
    kCGLCPSurfaceOpacity = 236,
    kCGLCPSurfaceBackingSize = 304,
    kCGLCPSurfaceSurfaceVolatile = 306,
    kCGLCPReclaimResources = 308,
    kCGLCPCurrentRendererID = 309,
    kCGLCPGPUVertexProcessing = 310,
    kCGLCPGPUFragmentProcessing = 311,
    kCGLCPHasDrawable = 314,
    kCGLCPMPSwapsInFlight = 315,
    kCGLCPGPURestartStatus = 317,
    kCGLCPAbortOnGPURestartStatusBlacklisted = 318,
    kCGLCPSupportGPURestart = 319,
    kCGLCPSupportSeparateAddressSpace = 320,
    kCGLCPContextPriorityRequest = 608,
}
pub use self::_CGLContextParameter as CGLContextParameter;
pub const kCGLCPContextPriorityRequestHigh: _bindgen_ty_46 =
    _bindgen_ty_46::kCGLCPContextPriorityRequestHigh;
pub const kCGLCPContextPriorityRequestNormal: _bindgen_ty_46 =
    _bindgen_ty_46::kCGLCPContextPriorityRequestNormal;
pub const kCGLCPContextPriorityRequestLow: _bindgen_ty_46 =
    _bindgen_ty_46::kCGLCPContextPriorityRequestLow;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_46 {
    kCGLCPContextPriorityRequestHigh = 0,
    kCGLCPContextPriorityRequestNormal = 1,
    kCGLCPContextPriorityRequestLow = 2,
}
pub use self::_bindgen_ty_46 as CGLCPContextPriorityRequest;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _CGLGlobalOption {
    kCGLGOFormatCacheSize = 501,
    kCGLGOClearFormatCache = 502,
    kCGLGORetainRenderers = 503,
    kCGLGOUseBuildCache = 506,
    kCGLGOResetLibrary = 504,
    kCGLGOUseErrorHandler = 505,
}
pub use self::_CGLGlobalOption as CGLGlobalOption;
pub const _CGLOpenGLProfile_kCGLOGLPVersion_GL3_Core: _CGLOpenGLProfile =
    _CGLOpenGLProfile::kCGLOGLPVersion_3_2_Core;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _CGLOpenGLProfile {
    kCGLOGLPVersion_Legacy = 4096,
    kCGLOGLPVersion_3_2_Core = 12800,
    kCGLOGLPVersion_GL4_Core = 16640,
}
pub use self::_CGLOpenGLProfile as CGLOpenGLProfile;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _CGLError {
    kCGLNoError = 0,
    kCGLBadAttribute = 10000,
    kCGLBadProperty = 10001,
    kCGLBadPixelFormat = 10002,
    kCGLBadRendererInfo = 10003,
    kCGLBadContext = 10004,
    kCGLBadDrawable = 10005,
    kCGLBadDisplay = 10006,
    kCGLBadState = 10007,
    kCGLBadValue = 10008,
    kCGLBadMatch = 10009,
    kCGLBadEnumeration = 10010,
    kCGLBadOffScreen = 10011,
    kCGLBadFullScreen = 10012,
    kCGLBadWindow = 10013,
    kCGLBadAddress = 10014,
    kCGLBadCodeModule = 10015,
    kCGLBadAlloc = 10016,
    kCGLBadConnection = 10017,
}
pub use self::_CGLError as CGLError;
pub type GLbitfield = u32;
pub type GLboolean = u8;
pub type GLbyte = i8;
pub type GLclampf = f32;
pub type GLenum = u32;
pub type GLfloat = f32;
pub type GLint = i32;
pub type GLshort = i16;
pub type GLsizei = i32;
pub type GLubyte = u8;
pub type GLuint = u32;
pub type GLushort = u16;
pub type GLvoid = ::std::os::raw::c_void;
pub type GLchar = ::std::os::raw::c_char;
pub type GLcharARB = ::std::os::raw::c_char;
pub type GLhandleARB = *mut ::std::os::raw::c_void;
pub type GLdouble = f64;
pub type GLclampd = f64;
pub type GLfixed = i32;
pub type GLhalf = u16;
pub type GLhalfARB = u16;
pub type GLint64 = i64;
pub type GLsync = *mut __GLsync;
pub type GLuint64 = u64;
pub type GLint64EXT = i64;
pub type GLuint64EXT = u64;
pub type GLintptr = isize;
pub type GLsizeiptr = isize;
pub type GLintptrARB = isize;
pub type GLsizeiptrARB = isize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGLShareGroupRec([u8; 0]);
pub type CGLShareGroupObj = *mut CGLShareGroupRec;
extern "C" {
    pub fn CGLGetShareGroup(ctx: CGLContextObj) -> CGLShareGroupObj;
}
extern "C" {
    pub fn CGLGetDeviceFromGLRenderer(rendererID: GLint) -> cl_device_id;
}
extern "C" {
    pub fn clGetGLContextInfoAPPLE(arg1: cl_context,
                                   arg2: *mut ::std::os::raw::c_void,
                                   arg3: cl_gl_platform_info, arg4: usize,
                                   arg5: *mut ::std::os::raw::c_void,
                                   arg6: *mut usize) -> cl_int;
}
extern "C" {
    pub fn clCreateEventFromGLsyncKHR(arg1: cl_context, arg2: cl_GLsync,
                                      arg3: *mut cl_int) -> cl_event;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __IOSurface([u8; 0]);
pub type IOSurfaceRef = *mut __IOSurface;
extern "C" {
    pub fn clCreateImageFromIOSurface2DAPPLE(arg1: cl_context,
                                             arg2: cl_mem_flags,
                                             arg3: *const cl_image_format,
                                             arg4: usize, arg5: usize,
                                             arg6: IOSurfaceRef,
                                             arg7: *mut cl_int) -> cl_mem;
}
pub type cl_iosurface_properties_APPLE = isize;
extern "C" {
    pub fn clCreateImageFromIOSurfaceWithPropertiesAPPLE(arg1: cl_context,
                                                         arg2: cl_mem_flags,
                                                         arg3:
                                                             *const cl_image_format,
                                                         arg4:
                                                             *const cl_image_desc,
                                                         arg5:
                                                             *mut cl_iosurface_properties_APPLE,
                                                         arg6: *mut cl_int)
     -> cl_mem;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
extern "C" {
    pub fn clSetMemObjectDestructorAPPLE(arg1: cl_mem,
                                         arg2:
                                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                            cl_mem,
                                                                                        arg2:
                                                                                            *mut ::std::os::raw::c_void)>,
                                         arg3: *mut ::std::os::raw::c_void)
     -> cl_int;
}
extern "C" {
    pub fn clLogMessagesToSystemLogAPPLE(arg1: *const ::std::os::raw::c_char,
                                         arg2: *const ::std::os::raw::c_void,
                                         arg3: usize,
                                         arg4: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn clLogMessagesToStdoutAPPLE(arg1: *const ::std::os::raw::c_char,
                                      arg2: *const ::std::os::raw::c_void,
                                      arg3: usize,
                                      arg4: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn clLogMessagesToStderrAPPLE(arg1: *const ::std::os::raw::c_char,
                                      arg2: *const ::std::os::raw::c_void,
                                      arg3: usize,
                                      arg4: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn clCreateContextAndCommandQueueAPPLE(arg1:
                                                   *const cl_context_properties,
                                               arg2: cl_uint,
                                               arg3: *const cl_device_id,
                                               arg4:
                                                   ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                  *const ::std::os::raw::c_char,
                                                                                              arg2:
                                                                                                  *const ::std::os::raw::c_void,
                                                                                              arg3:
                                                                                                  usize,
                                                                                              arg4:
                                                                                                  *mut ::std::os::raw::c_void)>,
                                               arg5:
                                                   *mut ::std::os::raw::c_void,
                                               arg6:
                                                   cl_command_queue_properties,
                                               arg7: *mut cl_context,
                                               arg8: *mut cl_command_queue)
     -> cl_int;
}
extern "C" {
    pub fn clCreateProgramAndKernelsWithSourceAPPLE(arg1: cl_context,
                                                    arg2: cl_uint,
                                                    arg3:
                                                        *mut *const ::std::os::raw::c_char,
                                                    arg4: *const usize,
                                                    arg5: cl_uint,
                                                    arg6: *const cl_device_id,
                                                    arg7:
                                                        *const ::std::os::raw::c_char,
                                                    arg8: cl_uint,
                                                    arg9:
                                                        *mut *const ::std::os::raw::c_char,
                                                    arg10: *mut cl_program,
                                                    arg11: *mut cl_kernel)
     -> cl_int;
}
extern "C" {
    pub fn clSetKernelArgsListAPPLE(arg1: cl_kernel, arg2: cl_uint, ...)
     -> cl_int;
}
extern "C" {
    pub fn clSetKernelArgsVaListAPPLE(arg1: cl_kernel, arg2: cl_uint,
                                      arg3: *mut __va_list_tag) -> cl_int;
}
extern "C" {
    pub fn clSetKernelArgByNameAPPLE(arg1: cl_kernel,
                                     arg2: *const ::std::os::raw::c_char,
                                     arg3: usize,
                                     arg4: *const ::std::os::raw::c_void)
     -> cl_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_dag([u8; 0]);
pub type cl_dag = *mut _cl_dag;
pub type cl_dag_node = ::std::os::raw::c_int;
extern "C" {
    pub fn clCreateDAGAPPLE(c: cl_context) -> cl_dag;
}
extern "C" {
    pub fn clReleaseDAGAPPLE(dag: cl_dag);
}
extern "C" {
    pub fn clGetDAGNodeAPPLE(d: cl_dag, f: cl_kernel, args: *mut cl_dag_node,
                             arg_indices: *mut ::std::os::raw::c_uint,
                             nargs: ::std::os::raw::c_uint) -> cl_dag_node;
}
extern "C" {
    pub fn clCreateKernelFromDAGAPPLE(d: cl_dag, n: cl_uint,
                                      list: *const cl_device_id) -> cl_kernel;
}
pub type cl_queue_properties_APPLE = isize;
extern "C" {
    pub fn clCreateCommandQueueWithPropertiesAPPLE(arg1: cl_context,
                                                   arg2: cl_device_id,
                                                   arg3:
                                                       *const cl_queue_properties_APPLE,
                                                   arg4: *mut cl_int)
     -> cl_command_queue;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl Clone for __va_list_tag {
    fn clone(&self) -> Self { *self }
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
